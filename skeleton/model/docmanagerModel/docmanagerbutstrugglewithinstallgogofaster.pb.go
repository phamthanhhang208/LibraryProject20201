// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/pinezapple/LibraryProject20201/skeleton/model/docmanagerbutstrugglewithinstallgogofaster.proto

package docmanagerModel

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	model "github.com/pinezapple/LibraryProject20201/skeleton/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Doc struct {
	ID                   uint64      `protobuf:"varint,1,opt,name=ID,proto3" json:"id_doc" db:"id_doc"`
	Name                 string      `protobuf:"bytes,2,opt,name=Name,proto3" json:"doc_name" db:"doc_name"`
	CreatedAt            *model.Time `protobuf:"bytes,3,opt,name=Created_at,json=CreatedAt,proto3" json:"created_at" db:"created_at"`
	UpdatedAt            *model.Time `protobuf:"bytes,4,opt,name=Updated_at,json=UpdatedAt,proto3" json:"updated_at" db:"updated_at"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Doc) Reset()         { *m = Doc{} }
func (m *Doc) String() string { return proto.CompactTextString(m) }
func (*Doc) ProtoMessage()    {}
func (*Doc) Descriptor() ([]byte, []int) {
	return fileDescriptor_106f5a8117dd362f, []int{0}
}
func (m *Doc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Doc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Doc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Doc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Doc.Merge(m, src)
}
func (m *Doc) XXX_Size() int {
	return m.Size()
}
func (m *Doc) XXX_DiscardUnknown() {
	xxx_messageInfo_Doc.DiscardUnknown(m)
}

var xxx_messageInfo_Doc proto.InternalMessageInfo

func (m *Doc) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Doc) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Doc) GetCreatedAt() *model.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Doc) GetUpdatedAt() *model.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type DocVersion struct {
	DocVer               string      `protobuf:"bytes,1,opt,name=DocVer,proto3" json:"doc_ver" db:"doc_ver"`
	DocID                uint64      `protobuf:"varint,2,opt,name=DocID,proto3" json:"id_doc" db:"id_doc"`
	Version              uint64      `protobuf:"varint,3,opt,name=Version,proto3" json:"version" db:"version"`
	DocType              string      `protobuf:"bytes,4,opt,name=DocType,proto3" json:"doc_type" db:"doc_type"`
	DocDescription       string      `protobuf:"bytes,5,opt,name=DocDescription,proto3" json:"doc_description" db:"doc_description"`
	Fee                  uint64      `protobuf:"varint,6,opt,name=fee,proto3" json:"fee" db:"fee"`
	Price                uint64      `protobuf:"varint,7,opt,name=price,proto3" json:"price" db:"price"`
	CreatedAt            *model.Time `protobuf:"bytes,8,opt,name=Created_at,json=CreatedAt,proto3" json:"created_at" db:"created_at"`
	UpdatedAt            *model.Time `protobuf:"bytes,9,opt,name=Updated_at,json=UpdatedAt,proto3" json:"updated_at" db:"updated_at"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DocVersion) Reset()         { *m = DocVersion{} }
func (m *DocVersion) String() string { return proto.CompactTextString(m) }
func (*DocVersion) ProtoMessage()    {}
func (*DocVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_106f5a8117dd362f, []int{1}
}
func (m *DocVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DocVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DocVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DocVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DocVersion.Merge(m, src)
}
func (m *DocVersion) XXX_Size() int {
	return m.Size()
}
func (m *DocVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_DocVersion.DiscardUnknown(m)
}

var xxx_messageInfo_DocVersion proto.InternalMessageInfo

func (m *DocVersion) GetDocVer() string {
	if m != nil {
		return m.DocVer
	}
	return ""
}

func (m *DocVersion) GetDocID() uint64 {
	if m != nil {
		return m.DocID
	}
	return 0
}

func (m *DocVersion) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *DocVersion) GetDocType() string {
	if m != nil {
		return m.DocType
	}
	return ""
}

func (m *DocVersion) GetDocDescription() string {
	if m != nil {
		return m.DocDescription
	}
	return ""
}

func (m *DocVersion) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *DocVersion) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *DocVersion) GetCreatedAt() *model.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *DocVersion) GetUpdatedAt() *model.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type Barcode struct {
	ID                   uint64      `protobuf:"varint,1,opt,name=ID,proto3" json:"id_barcode" db:"id_barcode"`
	DocVer               string      `protobuf:"bytes,2,opt,name=DocVer,proto3" json:"doc_ver" db:"doc_ver"`
	Status               uint64      `protobuf:"varint,3,opt,name=status,proto3" json:"status" db:"status"`
	CreatedAt            *model.Time `protobuf:"bytes,4,opt,name=Created_at,json=CreatedAt,proto3" json:"created_at" db:"created_at"`
	UpdatedAt            *model.Time `protobuf:"bytes,5,opt,name=Updated_at,json=UpdatedAt,proto3" json:"updated_at" db:"updated_at"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Barcode) Reset()         { *m = Barcode{} }
func (m *Barcode) String() string { return proto.CompactTextString(m) }
func (*Barcode) ProtoMessage()    {}
func (*Barcode) Descriptor() ([]byte, []int) {
	return fileDescriptor_106f5a8117dd362f, []int{2}
}
func (m *Barcode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Barcode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Barcode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Barcode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Barcode.Merge(m, src)
}
func (m *Barcode) XXX_Size() int {
	return m.Size()
}
func (m *Barcode) XXX_DiscardUnknown() {
	xxx_messageInfo_Barcode.DiscardUnknown(m)
}

var xxx_messageInfo_Barcode proto.InternalMessageInfo

func (m *Barcode) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Barcode) GetDocVer() string {
	if m != nil {
		return m.DocVer
	}
	return ""
}

func (m *Barcode) GetStatus() uint64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Barcode) GetCreatedAt() *model.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Barcode) GetUpdatedAt() *model.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type Payment struct {
	ID                   uint64      `protobuf:"varint,1,opt,name=ID,proto3" json:"id_payment" db:"id_payment"`
	Money                uint64      `protobuf:"varint,2,opt,name=Money,proto3" json:"money" db:"money"`
	Vendor               string      `protobuf:"bytes,3,opt,name=Vendor,proto3" json:"vendor" db:"vendor"`
	BarcodeID            uint64      `protobuf:"varint,4,opt,name=BarcodeID,proto3" json:"id_barcode" db:"id_barcode"`
	CreatedAt            *model.Time `protobuf:"bytes,5,opt,name=Created_at,json=CreatedAt,proto3" json:"created_at" db:"created_at"`
	UpdatedAt            *model.Time `protobuf:"bytes,6,opt,name=Updated_at,json=UpdatedAt,proto3" json:"updated_at" db:"updated_at"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Payment) Reset()         { *m = Payment{} }
func (m *Payment) String() string { return proto.CompactTextString(m) }
func (*Payment) ProtoMessage()    {}
func (*Payment) Descriptor() ([]byte, []int) {
	return fileDescriptor_106f5a8117dd362f, []int{3}
}
func (m *Payment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Payment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Payment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Payment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payment.Merge(m, src)
}
func (m *Payment) XXX_Size() int {
	return m.Size()
}
func (m *Payment) XXX_DiscardUnknown() {
	xxx_messageInfo_Payment.DiscardUnknown(m)
}

var xxx_messageInfo_Payment proto.InternalMessageInfo

func (m *Payment) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Payment) GetMoney() uint64 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *Payment) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *Payment) GetBarcodeID() uint64 {
	if m != nil {
		return m.BarcodeID
	}
	return 0
}

func (m *Payment) GetCreatedAt() *model.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Payment) GetUpdatedAt() *model.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type Receipt struct {
	ID                   uint64      `protobuf:"varint,1,opt,name=ID,proto3" json:"id_receipt" db:"id_receipt"`
	BorrowFormID         uint64      `protobuf:"varint,2,opt,name=BorrowFormID,proto3" json:"id_borrow_form" db:"id_borrow_form"`
	Money                uint64      `protobuf:"varint,3,opt,name=Money,proto3" json:"money" db:"money"`
	CreatedAt            *model.Time `protobuf:"bytes,4,opt,name=Created_at,json=CreatedAt,proto3" json:"created_at" db:"created_at"`
	UpdatedAt            *model.Time `protobuf:"bytes,5,opt,name=Updated_at,json=UpdatedAt,proto3" json:"updated_at" db:"updated_at"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Receipt) Reset()         { *m = Receipt{} }
func (m *Receipt) String() string { return proto.CompactTextString(m) }
func (*Receipt) ProtoMessage()    {}
func (*Receipt) Descriptor() ([]byte, []int) {
	return fileDescriptor_106f5a8117dd362f, []int{4}
}
func (m *Receipt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Receipt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Receipt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Receipt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Receipt.Merge(m, src)
}
func (m *Receipt) XXX_Size() int {
	return m.Size()
}
func (m *Receipt) XXX_DiscardUnknown() {
	xxx_messageInfo_Receipt.DiscardUnknown(m)
}

var xxx_messageInfo_Receipt proto.InternalMessageInfo

func (m *Receipt) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Receipt) GetBorrowFormID() uint64 {
	if m != nil {
		return m.BorrowFormID
	}
	return 0
}

func (m *Receipt) GetMoney() uint64 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *Receipt) GetCreatedAt() *model.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Receipt) GetUpdatedAt() *model.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type BorrowForm struct {
	ID                   uint64      `protobuf:"varint,1,opt,name=ID,proto3" json:"id_receipt" db:"id_receipt"`
	LibrarianID          uint64      `protobuf:"varint,2,opt,name=LibrarianID,proto3" json:"id_librarian" db:"id_librarian"`
	BarcodeID            uint64      `protobuf:"varint,3,opt,name=BarcodeID,proto3" json:"id_barcode" db:"id_barcode"`
	Status               uint64      `protobuf:"varint,4,opt,name=Status,proto3" json:"status" db:"status"`
	StartTime            *model.Time `protobuf:"bytes,5,opt,name=StartTime,proto3" json:"start_time" db:"start_time"`
	EndTime              *model.Time `protobuf:"bytes,6,opt,name=EndTime,proto3" json:"end_time" db:"end_time"`
	CreatedAt            *model.Time `protobuf:"bytes,7,opt,name=Created_at,json=CreatedAt,proto3" json:"created_at" db:"created_at"`
	UpdatedAt            *model.Time `protobuf:"bytes,8,opt,name=Updated_at,json=UpdatedAt,proto3" json:"updated_at" db:"updated_at"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *BorrowForm) Reset()         { *m = BorrowForm{} }
func (m *BorrowForm) String() string { return proto.CompactTextString(m) }
func (*BorrowForm) ProtoMessage()    {}
func (*BorrowForm) Descriptor() ([]byte, []int) {
	return fileDescriptor_106f5a8117dd362f, []int{5}
}
func (m *BorrowForm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BorrowForm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BorrowForm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BorrowForm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BorrowForm.Merge(m, src)
}
func (m *BorrowForm) XXX_Size() int {
	return m.Size()
}
func (m *BorrowForm) XXX_DiscardUnknown() {
	xxx_messageInfo_BorrowForm.DiscardUnknown(m)
}

var xxx_messageInfo_BorrowForm proto.InternalMessageInfo

func (m *BorrowForm) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *BorrowForm) GetLibrarianID() uint64 {
	if m != nil {
		return m.LibrarianID
	}
	return 0
}

func (m *BorrowForm) GetBarcodeID() uint64 {
	if m != nil {
		return m.BarcodeID
	}
	return 0
}

func (m *BorrowForm) GetStatus() uint64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *BorrowForm) GetStartTime() *model.Time {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *BorrowForm) GetEndTime() *model.Time {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *BorrowForm) GetCreatedAt() *model.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *BorrowForm) GetUpdatedAt() *model.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

// ---------------------------------------------------------------
type SelectAllBarcodeReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SelectAllBarcodeReq) Reset()         { *m = SelectAllBarcodeReq{} }
func (m *SelectAllBarcodeReq) String() string { return proto.CompactTextString(m) }
func (*SelectAllBarcodeReq) ProtoMessage()    {}
func (*SelectAllBarcodeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_106f5a8117dd362f, []int{6}
}
func (m *SelectAllBarcodeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectAllBarcodeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectAllBarcodeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectAllBarcodeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectAllBarcodeReq.Merge(m, src)
}
func (m *SelectAllBarcodeReq) XXX_Size() int {
	return m.Size()
}
func (m *SelectAllBarcodeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectAllBarcodeReq.DiscardUnknown(m)
}

var xxx_messageInfo_SelectAllBarcodeReq proto.InternalMessageInfo

type SelectAllBarcodeResp struct {
	Code                 int32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Barcodes             []*Barcode `protobuf:"bytes,3,rep,name=barcodes,proto3" json:"barcodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SelectAllBarcodeResp) Reset()         { *m = SelectAllBarcodeResp{} }
func (m *SelectAllBarcodeResp) String() string { return proto.CompactTextString(m) }
func (*SelectAllBarcodeResp) ProtoMessage()    {}
func (*SelectAllBarcodeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_106f5a8117dd362f, []int{7}
}
func (m *SelectAllBarcodeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectAllBarcodeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectAllBarcodeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectAllBarcodeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectAllBarcodeResp.Merge(m, src)
}
func (m *SelectAllBarcodeResp) XXX_Size() int {
	return m.Size()
}
func (m *SelectAllBarcodeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectAllBarcodeResp.DiscardUnknown(m)
}

var xxx_messageInfo_SelectAllBarcodeResp proto.InternalMessageInfo

func (m *SelectAllBarcodeResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SelectAllBarcodeResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SelectAllBarcodeResp) GetBarcodes() []*Barcode {
	if m != nil {
		return m.Barcodes
	}
	return nil
}

type SelectBarcodeByIDReq struct {
	BarcodeID            uint64   `protobuf:"varint,1,opt,name=barcodeID,proto3" json:"barcodeID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SelectBarcodeByIDReq) Reset()         { *m = SelectBarcodeByIDReq{} }
func (m *SelectBarcodeByIDReq) String() string { return proto.CompactTextString(m) }
func (*SelectBarcodeByIDReq) ProtoMessage()    {}
func (*SelectBarcodeByIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_106f5a8117dd362f, []int{8}
}
func (m *SelectBarcodeByIDReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectBarcodeByIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectBarcodeByIDReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectBarcodeByIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectBarcodeByIDReq.Merge(m, src)
}
func (m *SelectBarcodeByIDReq) XXX_Size() int {
	return m.Size()
}
func (m *SelectBarcodeByIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectBarcodeByIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_SelectBarcodeByIDReq proto.InternalMessageInfo

func (m *SelectBarcodeByIDReq) GetBarcodeID() uint64 {
	if m != nil {
		return m.BarcodeID
	}
	return 0
}

type SelectBarcodeByIDResp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Barcode              *Barcode `protobuf:"bytes,3,opt,name=barcode,proto3" json:"barcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SelectBarcodeByIDResp) Reset()         { *m = SelectBarcodeByIDResp{} }
func (m *SelectBarcodeByIDResp) String() string { return proto.CompactTextString(m) }
func (*SelectBarcodeByIDResp) ProtoMessage()    {}
func (*SelectBarcodeByIDResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_106f5a8117dd362f, []int{9}
}
func (m *SelectBarcodeByIDResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectBarcodeByIDResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectBarcodeByIDResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectBarcodeByIDResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectBarcodeByIDResp.Merge(m, src)
}
func (m *SelectBarcodeByIDResp) XXX_Size() int {
	return m.Size()
}
func (m *SelectBarcodeByIDResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectBarcodeByIDResp.DiscardUnknown(m)
}

var xxx_messageInfo_SelectBarcodeByIDResp proto.InternalMessageInfo

func (m *SelectBarcodeByIDResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SelectBarcodeByIDResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SelectBarcodeByIDResp) GetBarcode() *Barcode {
	if m != nil {
		return m.Barcode
	}
	return nil
}

type InsertBarcodeReq struct {
	Barcode              *Barcode `protobuf:"bytes,1,opt,name=barcode,proto3" json:"barcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InsertBarcodeReq) Reset()         { *m = InsertBarcodeReq{} }
func (m *InsertBarcodeReq) String() string { return proto.CompactTextString(m) }
func (*InsertBarcodeReq) ProtoMessage()    {}
func (*InsertBarcodeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_106f5a8117dd362f, []int{10}
}
func (m *InsertBarcodeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InsertBarcodeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InsertBarcodeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InsertBarcodeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InsertBarcodeReq.Merge(m, src)
}
func (m *InsertBarcodeReq) XXX_Size() int {
	return m.Size()
}
func (m *InsertBarcodeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_InsertBarcodeReq.DiscardUnknown(m)
}

var xxx_messageInfo_InsertBarcodeReq proto.InternalMessageInfo

func (m *InsertBarcodeReq) GetBarcode() *Barcode {
	if m != nil {
		return m.Barcode
	}
	return nil
}

type InsertBarcodeResp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InsertBarcodeResp) Reset()         { *m = InsertBarcodeResp{} }
func (m *InsertBarcodeResp) String() string { return proto.CompactTextString(m) }
func (*InsertBarcodeResp) ProtoMessage()    {}
func (*InsertBarcodeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_106f5a8117dd362f, []int{11}
}
func (m *InsertBarcodeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InsertBarcodeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InsertBarcodeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InsertBarcodeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InsertBarcodeResp.Merge(m, src)
}
func (m *InsertBarcodeResp) XXX_Size() int {
	return m.Size()
}
func (m *InsertBarcodeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_InsertBarcodeResp.DiscardUnknown(m)
}

var xxx_messageInfo_InsertBarcodeResp proto.InternalMessageInfo

func (m *InsertBarcodeResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *InsertBarcodeResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type UpdateBarcodeReq struct {
	Barcode              *Barcode `protobuf:"bytes,1,opt,name=barcode,proto3" json:"barcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateBarcodeReq) Reset()         { *m = UpdateBarcodeReq{} }
func (m *UpdateBarcodeReq) String() string { return proto.CompactTextString(m) }
func (*UpdateBarcodeReq) ProtoMessage()    {}
func (*UpdateBarcodeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_106f5a8117dd362f, []int{12}
}
func (m *UpdateBarcodeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBarcodeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBarcodeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBarcodeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBarcodeReq.Merge(m, src)
}
func (m *UpdateBarcodeReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBarcodeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBarcodeReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBarcodeReq proto.InternalMessageInfo

func (m *UpdateBarcodeReq) GetBarcode() *Barcode {
	if m != nil {
		return m.Barcode
	}
	return nil
}

type UpdateBarcodeResp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateBarcodeResp) Reset()         { *m = UpdateBarcodeResp{} }
func (m *UpdateBarcodeResp) String() string { return proto.CompactTextString(m) }
func (*UpdateBarcodeResp) ProtoMessage()    {}
func (*UpdateBarcodeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_106f5a8117dd362f, []int{13}
}
func (m *UpdateBarcodeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateBarcodeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateBarcodeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateBarcodeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBarcodeResp.Merge(m, src)
}
func (m *UpdateBarcodeResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateBarcodeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBarcodeResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBarcodeResp proto.InternalMessageInfo

func (m *UpdateBarcodeResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UpdateBarcodeResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteBarcodeReq struct {
	BarcodeID            uint64   `protobuf:"varint,1,opt,name=barcodeID,proto3" json:"barcodeID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteBarcodeReq) Reset()         { *m = DeleteBarcodeReq{} }
func (m *DeleteBarcodeReq) String() string { return proto.CompactTextString(m) }
func (*DeleteBarcodeReq) ProtoMessage()    {}
func (*DeleteBarcodeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_106f5a8117dd362f, []int{14}
}
func (m *DeleteBarcodeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteBarcodeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteBarcodeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteBarcodeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBarcodeReq.Merge(m, src)
}
func (m *DeleteBarcodeReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteBarcodeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBarcodeReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBarcodeReq proto.InternalMessageInfo

func (m *DeleteBarcodeReq) GetBarcodeID() uint64 {
	if m != nil {
		return m.BarcodeID
	}
	return 0
}

type DeleteBarcodeResp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteBarcodeResp) Reset()         { *m = DeleteBarcodeResp{} }
func (m *DeleteBarcodeResp) String() string { return proto.CompactTextString(m) }
func (*DeleteBarcodeResp) ProtoMessage()    {}
func (*DeleteBarcodeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_106f5a8117dd362f, []int{15}
}
func (m *DeleteBarcodeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteBarcodeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteBarcodeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteBarcodeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBarcodeResp.Merge(m, src)
}
func (m *DeleteBarcodeResp) XXX_Size() int {
	return m.Size()
}
func (m *DeleteBarcodeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBarcodeResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBarcodeResp proto.InternalMessageInfo

func (m *DeleteBarcodeResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DeleteBarcodeResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SelectAllBorrowFormReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SelectAllBorrowFormReq) Reset()         { *m = SelectAllBorrowFormReq{} }
func (m *SelectAllBorrowFormReq) String() string { return proto.CompactTextString(m) }
func (*SelectAllBorrowFormReq) ProtoMessage()    {}
func (*SelectAllBorrowFormReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_106f5a8117dd362f, []int{16}
}
func (m *SelectAllBorrowFormReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectAllBorrowFormReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectAllBorrowFormReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectAllBorrowFormReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectAllBorrowFormReq.Merge(m, src)
}
func (m *SelectAllBorrowFormReq) XXX_Size() int {
	return m.Size()
}
func (m *SelectAllBorrowFormReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectAllBorrowFormReq.DiscardUnknown(m)
}

var xxx_messageInfo_SelectAllBorrowFormReq proto.InternalMessageInfo

type SelectAllBorrowFormResp struct {
	Code                 int32         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	BorrowForms          []*BorrowForm `protobuf:"bytes,3,rep,name=borrowForms,proto3" json:"borrowForms,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SelectAllBorrowFormResp) Reset()         { *m = SelectAllBorrowFormResp{} }
func (m *SelectAllBorrowFormResp) String() string { return proto.CompactTextString(m) }
func (*SelectAllBorrowFormResp) ProtoMessage()    {}
func (*SelectAllBorrowFormResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_106f5a8117dd362f, []int{17}
}
func (m *SelectAllBorrowFormResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectAllBorrowFormResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectAllBorrowFormResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectAllBorrowFormResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectAllBorrowFormResp.Merge(m, src)
}
func (m *SelectAllBorrowFormResp) XXX_Size() int {
	return m.Size()
}
func (m *SelectAllBorrowFormResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectAllBorrowFormResp.DiscardUnknown(m)
}

var xxx_messageInfo_SelectAllBorrowFormResp proto.InternalMessageInfo

func (m *SelectAllBorrowFormResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SelectAllBorrowFormResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SelectAllBorrowFormResp) GetBorrowForms() []*BorrowForm {
	if m != nil {
		return m.BorrowForms
	}
	return nil
}

type SelectBorrowFormByIDReq struct {
	BorrowFormID         uint64   `protobuf:"varint,1,opt,name=BorrowFormID,proto3" json:"BorrowFormID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SelectBorrowFormByIDReq) Reset()         { *m = SelectBorrowFormByIDReq{} }
func (m *SelectBorrowFormByIDReq) String() string { return proto.CompactTextString(m) }
func (*SelectBorrowFormByIDReq) ProtoMessage()    {}
func (*SelectBorrowFormByIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_106f5a8117dd362f, []int{18}
}
func (m *SelectBorrowFormByIDReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectBorrowFormByIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectBorrowFormByIDReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectBorrowFormByIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectBorrowFormByIDReq.Merge(m, src)
}
func (m *SelectBorrowFormByIDReq) XXX_Size() int {
	return m.Size()
}
func (m *SelectBorrowFormByIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectBorrowFormByIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_SelectBorrowFormByIDReq proto.InternalMessageInfo

func (m *SelectBorrowFormByIDReq) GetBorrowFormID() uint64 {
	if m != nil {
		return m.BorrowFormID
	}
	return 0
}

type SelectBorrowFormByIDResp struct {
	Code                 int32       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Borrowform           *BorrowForm `protobuf:"bytes,3,opt,name=borrowform,proto3" json:"borrowform,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SelectBorrowFormByIDResp) Reset()         { *m = SelectBorrowFormByIDResp{} }
func (m *SelectBorrowFormByIDResp) String() string { return proto.CompactTextString(m) }
func (*SelectBorrowFormByIDResp) ProtoMessage()    {}
func (*SelectBorrowFormByIDResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_106f5a8117dd362f, []int{19}
}
func (m *SelectBorrowFormByIDResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectBorrowFormByIDResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectBorrowFormByIDResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectBorrowFormByIDResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectBorrowFormByIDResp.Merge(m, src)
}
func (m *SelectBorrowFormByIDResp) XXX_Size() int {
	return m.Size()
}
func (m *SelectBorrowFormByIDResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectBorrowFormByIDResp.DiscardUnknown(m)
}

var xxx_messageInfo_SelectBorrowFormByIDResp proto.InternalMessageInfo

func (m *SelectBorrowFormByIDResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SelectBorrowFormByIDResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SelectBorrowFormByIDResp) GetBorrowform() *BorrowForm {
	if m != nil {
		return m.Borrowform
	}
	return nil
}

type SaveBorrowFormReq struct {
	Borrowform           *BorrowForm `protobuf:"bytes,1,opt,name=borrowform,proto3" json:"borrowform,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SaveBorrowFormReq) Reset()         { *m = SaveBorrowFormReq{} }
func (m *SaveBorrowFormReq) String() string { return proto.CompactTextString(m) }
func (*SaveBorrowFormReq) ProtoMessage()    {}
func (*SaveBorrowFormReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_106f5a8117dd362f, []int{20}
}
func (m *SaveBorrowFormReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveBorrowFormReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveBorrowFormReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveBorrowFormReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveBorrowFormReq.Merge(m, src)
}
func (m *SaveBorrowFormReq) XXX_Size() int {
	return m.Size()
}
func (m *SaveBorrowFormReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveBorrowFormReq.DiscardUnknown(m)
}

var xxx_messageInfo_SaveBorrowFormReq proto.InternalMessageInfo

func (m *SaveBorrowFormReq) GetBorrowform() *BorrowForm {
	if m != nil {
		return m.Borrowform
	}
	return nil
}

type SaveBorrowFormResp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaveBorrowFormResp) Reset()         { *m = SaveBorrowFormResp{} }
func (m *SaveBorrowFormResp) String() string { return proto.CompactTextString(m) }
func (*SaveBorrowFormResp) ProtoMessage()    {}
func (*SaveBorrowFormResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_106f5a8117dd362f, []int{21}
}
func (m *SaveBorrowFormResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveBorrowFormResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveBorrowFormResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveBorrowFormResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveBorrowFormResp.Merge(m, src)
}
func (m *SaveBorrowFormResp) XXX_Size() int {
	return m.Size()
}
func (m *SaveBorrowFormResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveBorrowFormResp.DiscardUnknown(m)
}

var xxx_messageInfo_SaveBorrowFormResp proto.InternalMessageInfo

func (m *SaveBorrowFormResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SaveBorrowFormResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteBorrowFormReq struct {
	BorrowFormID         uint64   `protobuf:"varint,1,opt,name=borrowFormID,proto3" json:"borrowFormID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteBorrowFormReq) Reset()         { *m = DeleteBorrowFormReq{} }
func (m *DeleteBorrowFormReq) String() string { return proto.CompactTextString(m) }
func (*DeleteBorrowFormReq) ProtoMessage()    {}
func (*DeleteBorrowFormReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_106f5a8117dd362f, []int{22}
}
func (m *DeleteBorrowFormReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteBorrowFormReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteBorrowFormReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteBorrowFormReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBorrowFormReq.Merge(m, src)
}
func (m *DeleteBorrowFormReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteBorrowFormReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBorrowFormReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBorrowFormReq proto.InternalMessageInfo

func (m *DeleteBorrowFormReq) GetBorrowFormID() uint64 {
	if m != nil {
		return m.BorrowFormID
	}
	return 0
}

type DeleteBorrowFormResp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteBorrowFormResp) Reset()         { *m = DeleteBorrowFormResp{} }
func (m *DeleteBorrowFormResp) String() string { return proto.CompactTextString(m) }
func (*DeleteBorrowFormResp) ProtoMessage()    {}
func (*DeleteBorrowFormResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_106f5a8117dd362f, []int{23}
}
func (m *DeleteBorrowFormResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteBorrowFormResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteBorrowFormResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteBorrowFormResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBorrowFormResp.Merge(m, src)
}
func (m *DeleteBorrowFormResp) XXX_Size() int {
	return m.Size()
}
func (m *DeleteBorrowFormResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBorrowFormResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBorrowFormResp proto.InternalMessageInfo

func (m *DeleteBorrowFormResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DeleteBorrowFormResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Doc)(nil), "model.Doc")
	proto.RegisterType((*DocVersion)(nil), "model.DocVersion")
	proto.RegisterType((*Barcode)(nil), "model.Barcode")
	proto.RegisterType((*Payment)(nil), "model.Payment")
	proto.RegisterType((*Receipt)(nil), "model.Receipt")
	proto.RegisterType((*BorrowForm)(nil), "model.BorrowForm")
	proto.RegisterType((*SelectAllBarcodeReq)(nil), "model.SelectAllBarcodeReq")
	proto.RegisterType((*SelectAllBarcodeResp)(nil), "model.SelectAllBarcodeResp")
	proto.RegisterType((*SelectBarcodeByIDReq)(nil), "model.SelectBarcodeByIDReq")
	proto.RegisterType((*SelectBarcodeByIDResp)(nil), "model.SelectBarcodeByIDResp")
	proto.RegisterType((*InsertBarcodeReq)(nil), "model.InsertBarcodeReq")
	proto.RegisterType((*InsertBarcodeResp)(nil), "model.InsertBarcodeResp")
	proto.RegisterType((*UpdateBarcodeReq)(nil), "model.UpdateBarcodeReq")
	proto.RegisterType((*UpdateBarcodeResp)(nil), "model.UpdateBarcodeResp")
	proto.RegisterType((*DeleteBarcodeReq)(nil), "model.DeleteBarcodeReq")
	proto.RegisterType((*DeleteBarcodeResp)(nil), "model.DeleteBarcodeResp")
	proto.RegisterType((*SelectAllBorrowFormReq)(nil), "model.SelectAllBorrowFormReq")
	proto.RegisterType((*SelectAllBorrowFormResp)(nil), "model.SelectAllBorrowFormResp")
	proto.RegisterType((*SelectBorrowFormByIDReq)(nil), "model.SelectBorrowFormByIDReq")
	proto.RegisterType((*SelectBorrowFormByIDResp)(nil), "model.SelectBorrowFormByIDResp")
	proto.RegisterType((*SaveBorrowFormReq)(nil), "model.SaveBorrowFormReq")
	proto.RegisterType((*SaveBorrowFormResp)(nil), "model.SaveBorrowFormResp")
	proto.RegisterType((*DeleteBorrowFormReq)(nil), "model.DeleteBorrowFormReq")
	proto.RegisterType((*DeleteBorrowFormResp)(nil), "model.DeleteBorrowFormResp")
}

func init() {
	proto.RegisterFile("github.com/pinezapple/LibraryProject20201/skeleton/model/docmanagerbutstrugglewithinstallgogofaster.proto", fileDescriptor_106f5a8117dd362f)
}

var fileDescriptor_106f5a8117dd362f = []byte{
	// 1338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcb, 0x6f, 0x1b, 0x45,
	0x18, 0x67, 0x1d, 0x3f, 0xe2, 0x2f, 0x69, 0x68, 0x26, 0x2d, 0x75, 0xdd, 0xd6, 0x5b, 0x46, 0xaa,
	0x94, 0x0a, 0x35, 0x4e, 0x52, 0x50, 0xd5, 0x0a, 0x84, 0xe2, 0x6e, 0x5b, 0x22, 0x9a, 0xaa, 0xda,
	0x94, 0x22, 0x71, 0xb1, 0xd6, 0xbb, 0x13, 0x77, 0xc1, 0xde, 0xdd, 0xee, 0xae, 0x53, 0x85, 0x5b,
	0xf9, 0x6b, 0x90, 0x90, 0x38, 0x71, 0xe0, 0x88, 0x38, 0xf5, 0xc8, 0x91, 0xd3, 0xaa, 0xcd, 0xd1,
	0x27, 0xe4, 0x13, 0x17, 0x24, 0x34, 0xaf, 0x7d, 0xd9, 0x0e, 0x71, 0x92, 0x03, 0x37, 0x7f, 0xaf,
	0xdf, 0x7c, 0xf3, 0x9b, 0xdf, 0x7c, 0xb3, 0x09, 0xd8, 0x5d, 0x3b, 0x7c, 0x31, 0xe8, 0xac, 0x99,
	0x6e, 0xbf, 0xe9, 0xd9, 0x0e, 0xf9, 0xde, 0xf0, 0xbc, 0x1e, 0x69, 0x3e, 0xb6, 0x3b, 0xbe, 0xe1,
	0x1f, 0x3c, 0xf5, 0xdd, 0x6f, 0x89, 0x19, 0x6e, 0xae, 0x6f, 0xae, 0x6f, 0x34, 0x83, 0xef, 0x48,
	0x8f, 0x84, 0xae, 0xd3, 0xec, 0xbb, 0x16, 0xe9, 0x35, 0x2d, 0xd7, 0xec, 0x1b, 0x8e, 0xd1, 0x25,
	0x7e, 0x67, 0x10, 0x06, 0xa1, 0x3f, 0xe8, 0x76, 0x7b, 0xe4, 0x95, 0x1d, 0xbe, 0xb0, 0x9d, 0x20,
	0x34, 0x7a, 0xbd, 0xae, 0xdb, 0x75, 0xf7, 0x8c, 0x20, 0x24, 0xfe, 0x9a, 0xe7, 0xbb, 0xa1, 0x8b,
	0x4a, 0xac, 0xae, 0x7e, 0x2b, 0xb5, 0x22, 0xcd, 0x69, 0xb2, 0x68, 0x67, 0xb0, 0xc7, 0x2c, 0x66,
	0xb0, 0x5f, 0xbc, 0xaa, 0x7e, 0xff, 0xc4, 0x0d, 0x86, 0x76, 0x9f, 0x70, 0x10, 0xfc, 0xba, 0x00,
	0x73, 0x9a, 0x6b, 0xa2, 0x9b, 0x50, 0xd8, 0xd6, 0x6a, 0xca, 0x75, 0x65, 0xb5, 0xd8, 0xba, 0x3c,
	0x8c, 0xd4, 0xb2, 0x6d, 0xb5, 0x2d, 0xd7, 0x1c, 0x45, 0xea, 0x82, 0xd5, 0xb9, 0x87, 0xb9, 0x85,
	0xf5, 0xc2, 0xb6, 0x86, 0x36, 0xa0, 0xf8, 0xc4, 0xe8, 0x93, 0x5a, 0xe1, 0xba, 0xb2, 0x5a, 0x6d,
	0x5d, 0x1b, 0x46, 0xea, 0xbc, 0xe5, 0x9a, 0x6d, 0xc7, 0xe8, 0x93, 0x51, 0xa4, 0x9e, 0xa3, 0xe9,
	0xd2, 0xc6, 0x3a, 0x4b, 0x45, 0x3b, 0x00, 0xf7, 0x7d, 0x62, 0x84, 0xc4, 0x6a, 0x1b, 0x61, 0x6d,
	0xee, 0xba, 0xb2, 0xba, 0xb0, 0xb9, 0xb0, 0xc6, 0x9a, 0x59, 0x7b, 0x66, 0xf7, 0x49, 0xeb, 0xc3,
	0x61, 0xa4, 0x82, 0x19, 0xa7, 0x8c, 0x22, 0xf5, 0x7d, 0x8a, 0x93, 0x78, 0xb0, 0x5e, 0x15, 0x08,
	0x5b, 0x21, 0x85, 0xfb, 0xca, 0xb3, 0x24, 0x5c, 0x71, 0x0a, 0xdc, 0x20, 0x4e, 0x91, 0x70, 0x89,
	0x07, 0xeb, 0x55, 0x81, 0xb0, 0x15, 0xe2, 0x9f, 0x8a, 0x00, 0x9a, 0x6b, 0x3e, 0x27, 0x7e, 0x60,
	0xbb, 0x0e, 0xba, 0x0d, 0x65, 0x6e, 0x31, 0x3a, 0xaa, 0xad, 0x2b, 0xc3, 0x48, 0xad, 0xd0, 0x1d,
	0xed, 0x13, 0x7f, 0x14, 0xa9, 0x8b, 0x72, 0x83, 0xfb, 0xc4, 0xc7, 0xba, 0x48, 0x45, 0x4d, 0x28,
	0x69, 0xae, 0xb9, 0xad, 0x31, 0x56, 0x8e, 0xa4, 0x90, 0xe7, 0xa1, 0x4f, 0xa0, 0x22, 0x16, 0x64,
	0x7c, 0x14, 0xf9, 0x32, 0xfb, 0xdc, 0x25, 0x97, 0x11, 0x26, 0xd6, 0x65, 0x2e, 0xba, 0x03, 0x15,
	0xcd, 0x35, 0x9f, 0x1d, 0x78, 0x84, 0xed, 0x3b, 0xc5, 0x7f, 0x78, 0xe0, 0x65, 0xf8, 0xa7, 0x36,
	0xd6, 0x65, 0x36, 0xda, 0x85, 0x25, 0xcd, 0x35, 0x35, 0x12, 0x98, 0xbe, 0xed, 0x85, 0x74, 0xd9,
	0x12, 0xab, 0xff, 0x68, 0x48, 0xc9, 0x71, 0xcd, 0xb6, 0x95, 0x84, 0x46, 0x91, 0x7a, 0x41, 0xc2,
	0xa4, 0xdc, 0x58, 0xcf, 0x41, 0xa0, 0x1b, 0x30, 0xb7, 0x47, 0x48, 0xad, 0xcc, 0x36, 0xb0, 0x32,
	0x8c, 0x54, 0x6a, 0x8e, 0x68, 0x43, 0x9d, 0x7b, 0x78, 0x8f, 0x10, 0xac, 0x53, 0x07, 0xba, 0x05,
	0x25, 0xcf, 0xb7, 0x4d, 0x52, 0xab, 0xb0, 0xc4, 0x4b, 0xc3, 0x48, 0xe5, 0x8e, 0x51, 0xa4, 0x02,
	0x4d, 0x65, 0x06, 0xd6, 0xb9, 0x33, 0xa7, 0x96, 0xf9, 0xb3, 0x55, 0x4b, 0xf5, 0xb4, 0x6a, 0xf9,
	0xbd, 0x00, 0x95, 0x96, 0xe1, 0x9b, 0xae, 0x45, 0xd0, 0x46, 0xea, 0xd6, 0x30, 0x14, 0xdb, 0x6a,
	0x77, 0x78, 0x4c, 0xa2, 0x24, 0x1e, 0x7e, 0x7b, 0x12, 0x75, 0x15, 0x8e, 0xaf, 0xae, 0x0d, 0x28,
	0x07, 0xa1, 0x11, 0x0e, 0x02, 0xa1, 0x15, 0x26, 0x2f, 0xee, 0x91, 0xf2, 0xe2, 0x16, 0xd6, 0x85,
	0x3b, 0x47, 0x62, 0xf1, 0x6c, 0x49, 0x2c, 0x9d, 0x96, 0xc4, 0x7f, 0x0a, 0x50, 0x79, 0x6a, 0x1c,
	0xf4, 0x89, 0x13, 0x4e, 0x24, 0xd1, 0xe3, 0xb1, 0x14, 0x89, 0xc2, 0xc3, 0x49, 0xbc, 0x05, 0xa5,
	0x1d, 0xd7, 0x21, 0x07, 0xe2, 0xb6, 0x31, 0x41, 0xf5, 0xa9, 0x43, 0x0a, 0x8a, 0x19, 0x58, 0xe7,
	0x59, 0x94, 0xbe, 0xe7, 0xc4, 0xb1, 0x5c, 0x9f, 0xd1, 0x57, 0xe5, 0xf4, 0xed, 0x33, 0x8f, 0xa4,
	0x8f, 0x5b, 0x58, 0x17, 0x89, 0xe8, 0x73, 0xa8, 0x8a, 0x43, 0xde, 0xd6, 0x18, 0x7b, 0xc7, 0x3a,
	0xe0, 0xa4, 0x26, 0xc7, 0x7f, 0xe9, 0x6c, 0xf9, 0x2f, 0x9f, 0x96, 0xff, 0x3f, 0x0b, 0x50, 0xd1,
	0x89, 0x49, 0x6c, 0x6f, 0x32, 0xff, 0x3e, 0x8f, 0xa5, 0xf6, 0x28, 0x3c, 0x9c, 0xff, 0x1d, 0x58,
	0x6c, 0xb9, 0xbe, 0xef, 0xbe, 0x7a, 0xe8, 0xfa, 0xfd, 0x78, 0xe8, 0xdd, 0x1c, 0x46, 0xea, 0x12,
	0xa5, 0x83, 0x85, 0xda, 0x7b, 0xae, 0xdf, 0x1f, 0x45, 0xea, 0x8a, 0x24, 0x29, 0xf1, 0x62, 0x3d,
	0x53, 0x9e, 0x1c, 0xe7, 0xdc, 0xb1, 0x8e, 0xf3, 0xff, 0x2d, 0xed, 0x9f, 0x8b, 0x00, 0xc9, 0xee,
	0x4e, 0xc2, 0xee, 0x23, 0x58, 0xe0, 0x8f, 0xb8, 0x6d, 0x38, 0x31, 0xb9, 0x37, 0x86, 0x91, 0xba,
	0x68, 0x5b, 0xed, 0x9e, 0x8c, 0x8c, 0x22, 0x75, 0x59, 0x54, 0xc7, 0x3e, 0xac, 0xa7, 0x2b, 0xb3,
	0x22, 0x9e, 0x3b, 0x81, 0x88, 0x37, 0xa0, 0xbc, 0xcb, 0xe7, 0x4e, 0xf1, 0x3f, 0xe7, 0x0e, 0x4f,
	0x44, 0x8f, 0xa1, 0xba, 0x1b, 0x1a, 0x7e, 0x48, 0x99, 0x9b, 0x4a, 0x66, 0x40, 0x33, 0xda, 0xf4,
	0x33, 0x44, 0x36, 0x90, 0x78, 0xb0, 0x9e, 0x00, 0x20, 0x0d, 0x2a, 0x0f, 0x1c, 0x8b, 0x61, 0x4d,
	0xd0, 0x3c, 0x7b, 0xfb, 0x88, 0x63, 0x49, 0x24, 0xf6, 0xf6, 0x49, 0x1b, 0xeb, 0xb2, 0x34, 0x27,
	0x98, 0xca, 0xd9, 0x0a, 0x66, 0xfe, 0xb4, 0x82, 0xb9, 0x08, 0x2b, 0xbb, 0xa4, 0x47, 0xcc, 0x70,
	0xab, 0xd7, 0x13, 0xd4, 0xeb, 0xe4, 0x25, 0xde, 0x87, 0x0b, 0xe3, 0xee, 0xc0, 0x43, 0x08, 0x8a,
	0xf4, 0x37, 0x93, 0x54, 0x49, 0x67, 0xbf, 0x51, 0x0d, 0x2a, 0x7d, 0x12, 0x04, 0x46, 0x57, 0x7c,
	0x95, 0xe9, 0xd2, 0x44, 0xeb, 0x30, 0x2f, 0x0e, 0x96, 0xbe, 0x1d, 0x73, 0xab, 0x0b, 0x9b, 0x4b,
	0xa2, 0x53, 0x81, 0xd9, 0x2a, 0xbe, 0x89, 0x54, 0x45, 0x8f, 0xb3, 0xf0, 0xc7, 0x72, 0x5d, 0x99,
	0x70, 0xb0, 0xad, 0xe9, 0xe4, 0x25, 0xba, 0x0a, 0xd5, 0x4e, 0x2c, 0x26, 0xa6, 0x67, 0x3d, 0x71,
	0xe0, 0x01, 0x5c, 0x9c, 0x50, 0x35, 0x73, 0xbb, 0x6b, 0x50, 0x11, 0x98, 0xe2, 0x2b, 0x71, 0x72,
	0xb7, 0x32, 0x09, 0x7f, 0x0a, 0xe7, 0xb7, 0x9d, 0x80, 0xf8, 0x61, 0x42, 0x1c, 0x5a, 0x4d, 0x30,
	0x94, 0x49, 0x18, 0x49, 0xf5, 0x16, 0x2c, 0xe7, 0xaa, 0x67, 0x6d, 0x98, 0x36, 0xc0, 0x4f, 0xf2,
	0xa4, 0x0d, 0xe4, 0xaa, 0x67, 0x6e, 0x60, 0x1d, 0xce, 0x6b, 0xf4, 0xe3, 0x3e, 0xdd, 0xc0, 0xd1,
	0x47, 0xb5, 0x05, 0xcb, 0xb9, 0x8a, 0x99, 0x17, 0xad, 0xc1, 0x07, 0x89, 0x36, 0xe3, 0x59, 0x47,
	0x55, 0xfb, 0x83, 0x02, 0x97, 0x26, 0x86, 0x66, 0x96, 0xc2, 0x5d, 0x58, 0xe8, 0xc4, 0xf5, 0x52,
	0xbc, 0xcb, 0x92, 0xc9, 0x38, 0x22, 0x14, 0x91, 0xce, 0xc5, 0x9f, 0xc9, 0x1e, 0x52, 0x69, 0x42,
	0xc5, 0x38, 0xf7, 0x72, 0x71, 0x76, 0x32, 0x3e, 0xfc, 0x5a, 0x81, 0xda, 0xe4, 0xfa, 0x99, 0x37,
	0x71, 0x07, 0x80, 0x37, 0x46, 0x9f, 0x3d, 0x21, 0xe9, 0xa9, 0x7b, 0x48, 0xa5, 0xe2, 0x87, 0xb0,
	0xbc, 0x6b, 0xec, 0x93, 0x0c, 0xb9, 0x68, 0x23, 0x83, 0xa6, 0x4c, 0x41, 0xcb, 0xe0, 0xb4, 0x00,
	0xe5, 0x71, 0x66, 0x3e, 0xed, 0xbb, 0xb0, 0x22, 0x04, 0x93, 0xe9, 0x06, 0xc3, 0x62, 0x67, 0x02,
	0x95, 0x69, 0x1f, 0xd6, 0xe0, 0xc2, 0x78, 0xe9, 0xac, 0x0d, 0x6c, 0xfe, 0x52, 0x62, 0x7f, 0xa0,
	0x89, 0x3f, 0xaa, 0xd1, 0x97, 0x70, 0x3e, 0x3f, 0x19, 0x51, 0x5d, 0xd0, 0x30, 0x61, 0x92, 0xd6,
	0xaf, 0x4c, 0x8d, 0x05, 0x1e, 0x7a, 0x02, 0xcb, 0x63, 0x83, 0x0b, 0x65, 0x2b, 0xb2, 0x83, 0xb0,
	0x7e, 0x75, 0x7a, 0x30, 0xf0, 0x50, 0x0b, 0xce, 0x65, 0x66, 0x0a, 0xba, 0x24, 0xd2, 0xf3, 0x73,
	0xaa, 0x5e, 0x9b, 0x1c, 0xe0, 0x18, 0x99, 0xb1, 0x10, 0x63, 0xe4, 0x47, 0x4d, 0x8c, 0x31, 0x3e,
	0x45, 0x5a, 0x70, 0x2e, 0x73, 0xcb, 0x63, 0x8c, 0xfc, 0xb4, 0x88, 0x31, 0xc6, 0x87, 0xc2, 0xb3,
	0xf4, 0xcb, 0x94, 0x7c, 0xd2, 0x5c, 0x1b, 0xe3, 0x33, 0xad, 0x8b, 0x7a, 0xe3, 0xa8, 0x70, 0xe0,
	0xa1, 0xaf, 0xe3, 0x07, 0x26, 0x73, 0xbb, 0x50, 0xb6, 0x6e, 0xec, 0xea, 0xd6, 0xd5, 0x23, 0xe3,
	0x81, 0x87, 0x1e, 0xc0, 0x52, 0x56, 0xeb, 0x48, 0x6e, 0x6d, 0xec, 0x2a, 0xd5, 0x2f, 0x4f, 0x89,
	0x04, 0x1e, 0x7a, 0x14, 0x4f, 0xd4, 0xd3, 0x01, 0xb5, 0x9c, 0xb7, 0xef, 0x1a, 0xca, 0x5f, 0xef,
	0x1a, 0xca, 0xdf, 0xef, 0x1a, 0xca, 0x8f, 0x87, 0x0d, 0xe5, 0xd7, 0xc3, 0x86, 0xf2, 0xdb, 0x61,
	0xe3, 0xbd, 0x37, 0x87, 0x0d, 0xe5, 0x8f, 0xc3, 0x86, 0xf2, 0xf6, 0xb0, 0xa1, 0x7c, 0xf3, 0xc5,
	0x19, 0xfc, 0x9f, 0x69, 0x87, 0xda, 0x9d, 0x32, 0xfb, 0x97, 0xce, 0xed, 0x7f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x23, 0x75, 0x22, 0xd4, 0xba, 0x12, 0x00, 0x00,
}

func (this *Doc) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Doc)
	if !ok {
		that2, ok := that.(Doc)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Doc")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Doc but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Doc but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return fmt.Errorf("CreatedAt this(%v) Not Equal that(%v)", this.CreatedAt, that1.CreatedAt)
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return fmt.Errorf("UpdatedAt this(%v) Not Equal that(%v)", this.UpdatedAt, that1.UpdatedAt)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Doc) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Doc)
	if !ok {
		that2, ok := that.(Doc)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DocVersion) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DocVersion)
	if !ok {
		that2, ok := that.(DocVersion)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DocVersion")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DocVersion but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DocVersion but is not nil && this == nil")
	}
	if this.DocVer != that1.DocVer {
		return fmt.Errorf("DocVer this(%v) Not Equal that(%v)", this.DocVer, that1.DocVer)
	}
	if this.DocID != that1.DocID {
		return fmt.Errorf("DocID this(%v) Not Equal that(%v)", this.DocID, that1.DocID)
	}
	if this.Version != that1.Version {
		return fmt.Errorf("Version this(%v) Not Equal that(%v)", this.Version, that1.Version)
	}
	if this.DocType != that1.DocType {
		return fmt.Errorf("DocType this(%v) Not Equal that(%v)", this.DocType, that1.DocType)
	}
	if this.DocDescription != that1.DocDescription {
		return fmt.Errorf("DocDescription this(%v) Not Equal that(%v)", this.DocDescription, that1.DocDescription)
	}
	if this.Fee != that1.Fee {
		return fmt.Errorf("Fee this(%v) Not Equal that(%v)", this.Fee, that1.Fee)
	}
	if this.Price != that1.Price {
		return fmt.Errorf("Price this(%v) Not Equal that(%v)", this.Price, that1.Price)
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return fmt.Errorf("CreatedAt this(%v) Not Equal that(%v)", this.CreatedAt, that1.CreatedAt)
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return fmt.Errorf("UpdatedAt this(%v) Not Equal that(%v)", this.UpdatedAt, that1.UpdatedAt)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *DocVersion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DocVersion)
	if !ok {
		that2, ok := that.(DocVersion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DocVer != that1.DocVer {
		return false
	}
	if this.DocID != that1.DocID {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.DocType != that1.DocType {
		return false
	}
	if this.DocDescription != that1.DocDescription {
		return false
	}
	if this.Fee != that1.Fee {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Barcode) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Barcode)
	if !ok {
		that2, ok := that.(Barcode)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Barcode")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Barcode but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Barcode but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if this.DocVer != that1.DocVer {
		return fmt.Errorf("DocVer this(%v) Not Equal that(%v)", this.DocVer, that1.DocVer)
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return fmt.Errorf("CreatedAt this(%v) Not Equal that(%v)", this.CreatedAt, that1.CreatedAt)
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return fmt.Errorf("UpdatedAt this(%v) Not Equal that(%v)", this.UpdatedAt, that1.UpdatedAt)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Barcode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Barcode)
	if !ok {
		that2, ok := that.(Barcode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.DocVer != that1.DocVer {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Payment) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Payment)
	if !ok {
		that2, ok := that.(Payment)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Payment")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Payment but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Payment but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if this.Money != that1.Money {
		return fmt.Errorf("Money this(%v) Not Equal that(%v)", this.Money, that1.Money)
	}
	if this.Vendor != that1.Vendor {
		return fmt.Errorf("Vendor this(%v) Not Equal that(%v)", this.Vendor, that1.Vendor)
	}
	if this.BarcodeID != that1.BarcodeID {
		return fmt.Errorf("BarcodeID this(%v) Not Equal that(%v)", this.BarcodeID, that1.BarcodeID)
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return fmt.Errorf("CreatedAt this(%v) Not Equal that(%v)", this.CreatedAt, that1.CreatedAt)
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return fmt.Errorf("UpdatedAt this(%v) Not Equal that(%v)", this.UpdatedAt, that1.UpdatedAt)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Payment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Payment)
	if !ok {
		that2, ok := that.(Payment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Money != that1.Money {
		return false
	}
	if this.Vendor != that1.Vendor {
		return false
	}
	if this.BarcodeID != that1.BarcodeID {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Receipt) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Receipt)
	if !ok {
		that2, ok := that.(Receipt)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Receipt")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Receipt but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Receipt but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if this.BorrowFormID != that1.BorrowFormID {
		return fmt.Errorf("BorrowFormID this(%v) Not Equal that(%v)", this.BorrowFormID, that1.BorrowFormID)
	}
	if this.Money != that1.Money {
		return fmt.Errorf("Money this(%v) Not Equal that(%v)", this.Money, that1.Money)
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return fmt.Errorf("CreatedAt this(%v) Not Equal that(%v)", this.CreatedAt, that1.CreatedAt)
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return fmt.Errorf("UpdatedAt this(%v) Not Equal that(%v)", this.UpdatedAt, that1.UpdatedAt)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Receipt) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Receipt)
	if !ok {
		that2, ok := that.(Receipt)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.BorrowFormID != that1.BorrowFormID {
		return false
	}
	if this.Money != that1.Money {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BorrowForm) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BorrowForm)
	if !ok {
		that2, ok := that.(BorrowForm)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BorrowForm")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BorrowForm but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BorrowForm but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if this.LibrarianID != that1.LibrarianID {
		return fmt.Errorf("LibrarianID this(%v) Not Equal that(%v)", this.LibrarianID, that1.LibrarianID)
	}
	if this.BarcodeID != that1.BarcodeID {
		return fmt.Errorf("BarcodeID this(%v) Not Equal that(%v)", this.BarcodeID, that1.BarcodeID)
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if !this.StartTime.Equal(that1.StartTime) {
		return fmt.Errorf("StartTime this(%v) Not Equal that(%v)", this.StartTime, that1.StartTime)
	}
	if !this.EndTime.Equal(that1.EndTime) {
		return fmt.Errorf("EndTime this(%v) Not Equal that(%v)", this.EndTime, that1.EndTime)
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return fmt.Errorf("CreatedAt this(%v) Not Equal that(%v)", this.CreatedAt, that1.CreatedAt)
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return fmt.Errorf("UpdatedAt this(%v) Not Equal that(%v)", this.UpdatedAt, that1.UpdatedAt)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *BorrowForm) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BorrowForm)
	if !ok {
		that2, ok := that.(BorrowForm)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.LibrarianID != that1.LibrarianID {
		return false
	}
	if this.BarcodeID != that1.BarcodeID {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.StartTime.Equal(that1.StartTime) {
		return false
	}
	if !this.EndTime.Equal(that1.EndTime) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SelectAllBarcodeReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectAllBarcodeReq)
	if !ok {
		that2, ok := that.(SelectAllBarcodeReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectAllBarcodeReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectAllBarcodeReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectAllBarcodeReq but is not nil && this == nil")
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SelectAllBarcodeReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectAllBarcodeReq)
	if !ok {
		that2, ok := that.(SelectAllBarcodeReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SelectAllBarcodeResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectAllBarcodeResp)
	if !ok {
		that2, ok := that.(SelectAllBarcodeResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectAllBarcodeResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectAllBarcodeResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectAllBarcodeResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	if len(this.Barcodes) != len(that1.Barcodes) {
		return fmt.Errorf("Barcodes this(%v) Not Equal that(%v)", len(this.Barcodes), len(that1.Barcodes))
	}
	for i := range this.Barcodes {
		if !this.Barcodes[i].Equal(that1.Barcodes[i]) {
			return fmt.Errorf("Barcodes this[%v](%v) Not Equal that[%v](%v)", i, this.Barcodes[i], i, that1.Barcodes[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SelectAllBarcodeResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectAllBarcodeResp)
	if !ok {
		that2, ok := that.(SelectAllBarcodeResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if len(this.Barcodes) != len(that1.Barcodes) {
		return false
	}
	for i := range this.Barcodes {
		if !this.Barcodes[i].Equal(that1.Barcodes[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SelectBarcodeByIDReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectBarcodeByIDReq)
	if !ok {
		that2, ok := that.(SelectBarcodeByIDReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectBarcodeByIDReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectBarcodeByIDReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectBarcodeByIDReq but is not nil && this == nil")
	}
	if this.BarcodeID != that1.BarcodeID {
		return fmt.Errorf("BarcodeID this(%v) Not Equal that(%v)", this.BarcodeID, that1.BarcodeID)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SelectBarcodeByIDReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectBarcodeByIDReq)
	if !ok {
		that2, ok := that.(SelectBarcodeByIDReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BarcodeID != that1.BarcodeID {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SelectBarcodeByIDResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectBarcodeByIDResp)
	if !ok {
		that2, ok := that.(SelectBarcodeByIDResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectBarcodeByIDResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectBarcodeByIDResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectBarcodeByIDResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	if !this.Barcode.Equal(that1.Barcode) {
		return fmt.Errorf("Barcode this(%v) Not Equal that(%v)", this.Barcode, that1.Barcode)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SelectBarcodeByIDResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectBarcodeByIDResp)
	if !ok {
		that2, ok := that.(SelectBarcodeByIDResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if !this.Barcode.Equal(that1.Barcode) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *InsertBarcodeReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*InsertBarcodeReq)
	if !ok {
		that2, ok := that.(InsertBarcodeReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *InsertBarcodeReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *InsertBarcodeReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *InsertBarcodeReq but is not nil && this == nil")
	}
	if !this.Barcode.Equal(that1.Barcode) {
		return fmt.Errorf("Barcode this(%v) Not Equal that(%v)", this.Barcode, that1.Barcode)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *InsertBarcodeReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InsertBarcodeReq)
	if !ok {
		that2, ok := that.(InsertBarcodeReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Barcode.Equal(that1.Barcode) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *InsertBarcodeResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*InsertBarcodeResp)
	if !ok {
		that2, ok := that.(InsertBarcodeResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *InsertBarcodeResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *InsertBarcodeResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *InsertBarcodeResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *InsertBarcodeResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InsertBarcodeResp)
	if !ok {
		that2, ok := that.(InsertBarcodeResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UpdateBarcodeReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateBarcodeReq)
	if !ok {
		that2, ok := that.(UpdateBarcodeReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateBarcodeReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateBarcodeReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateBarcodeReq but is not nil && this == nil")
	}
	if !this.Barcode.Equal(that1.Barcode) {
		return fmt.Errorf("Barcode this(%v) Not Equal that(%v)", this.Barcode, that1.Barcode)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *UpdateBarcodeReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateBarcodeReq)
	if !ok {
		that2, ok := that.(UpdateBarcodeReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Barcode.Equal(that1.Barcode) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UpdateBarcodeResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateBarcodeResp)
	if !ok {
		that2, ok := that.(UpdateBarcodeResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateBarcodeResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateBarcodeResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateBarcodeResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *UpdateBarcodeResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateBarcodeResp)
	if !ok {
		that2, ok := that.(UpdateBarcodeResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DeleteBarcodeReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DeleteBarcodeReq)
	if !ok {
		that2, ok := that.(DeleteBarcodeReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DeleteBarcodeReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DeleteBarcodeReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DeleteBarcodeReq but is not nil && this == nil")
	}
	if this.BarcodeID != that1.BarcodeID {
		return fmt.Errorf("BarcodeID this(%v) Not Equal that(%v)", this.BarcodeID, that1.BarcodeID)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *DeleteBarcodeReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteBarcodeReq)
	if !ok {
		that2, ok := that.(DeleteBarcodeReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BarcodeID != that1.BarcodeID {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DeleteBarcodeResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DeleteBarcodeResp)
	if !ok {
		that2, ok := that.(DeleteBarcodeResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DeleteBarcodeResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DeleteBarcodeResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DeleteBarcodeResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *DeleteBarcodeResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteBarcodeResp)
	if !ok {
		that2, ok := that.(DeleteBarcodeResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SelectAllBorrowFormReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectAllBorrowFormReq)
	if !ok {
		that2, ok := that.(SelectAllBorrowFormReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectAllBorrowFormReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectAllBorrowFormReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectAllBorrowFormReq but is not nil && this == nil")
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SelectAllBorrowFormReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectAllBorrowFormReq)
	if !ok {
		that2, ok := that.(SelectAllBorrowFormReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SelectAllBorrowFormResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectAllBorrowFormResp)
	if !ok {
		that2, ok := that.(SelectAllBorrowFormResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectAllBorrowFormResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectAllBorrowFormResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectAllBorrowFormResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	if len(this.BorrowForms) != len(that1.BorrowForms) {
		return fmt.Errorf("BorrowForms this(%v) Not Equal that(%v)", len(this.BorrowForms), len(that1.BorrowForms))
	}
	for i := range this.BorrowForms {
		if !this.BorrowForms[i].Equal(that1.BorrowForms[i]) {
			return fmt.Errorf("BorrowForms this[%v](%v) Not Equal that[%v](%v)", i, this.BorrowForms[i], i, that1.BorrowForms[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SelectAllBorrowFormResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectAllBorrowFormResp)
	if !ok {
		that2, ok := that.(SelectAllBorrowFormResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if len(this.BorrowForms) != len(that1.BorrowForms) {
		return false
	}
	for i := range this.BorrowForms {
		if !this.BorrowForms[i].Equal(that1.BorrowForms[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SelectBorrowFormByIDReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectBorrowFormByIDReq)
	if !ok {
		that2, ok := that.(SelectBorrowFormByIDReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectBorrowFormByIDReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectBorrowFormByIDReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectBorrowFormByIDReq but is not nil && this == nil")
	}
	if this.BorrowFormID != that1.BorrowFormID {
		return fmt.Errorf("BorrowFormID this(%v) Not Equal that(%v)", this.BorrowFormID, that1.BorrowFormID)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SelectBorrowFormByIDReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectBorrowFormByIDReq)
	if !ok {
		that2, ok := that.(SelectBorrowFormByIDReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BorrowFormID != that1.BorrowFormID {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SelectBorrowFormByIDResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectBorrowFormByIDResp)
	if !ok {
		that2, ok := that.(SelectBorrowFormByIDResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectBorrowFormByIDResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectBorrowFormByIDResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectBorrowFormByIDResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	if !this.Borrowform.Equal(that1.Borrowform) {
		return fmt.Errorf("Borrowform this(%v) Not Equal that(%v)", this.Borrowform, that1.Borrowform)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SelectBorrowFormByIDResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectBorrowFormByIDResp)
	if !ok {
		that2, ok := that.(SelectBorrowFormByIDResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if !this.Borrowform.Equal(that1.Borrowform) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SaveBorrowFormReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SaveBorrowFormReq)
	if !ok {
		that2, ok := that.(SaveBorrowFormReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SaveBorrowFormReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SaveBorrowFormReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SaveBorrowFormReq but is not nil && this == nil")
	}
	if !this.Borrowform.Equal(that1.Borrowform) {
		return fmt.Errorf("Borrowform this(%v) Not Equal that(%v)", this.Borrowform, that1.Borrowform)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SaveBorrowFormReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SaveBorrowFormReq)
	if !ok {
		that2, ok := that.(SaveBorrowFormReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Borrowform.Equal(that1.Borrowform) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SaveBorrowFormResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SaveBorrowFormResp)
	if !ok {
		that2, ok := that.(SaveBorrowFormResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SaveBorrowFormResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SaveBorrowFormResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SaveBorrowFormResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SaveBorrowFormResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SaveBorrowFormResp)
	if !ok {
		that2, ok := that.(SaveBorrowFormResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DeleteBorrowFormReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DeleteBorrowFormReq)
	if !ok {
		that2, ok := that.(DeleteBorrowFormReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DeleteBorrowFormReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DeleteBorrowFormReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DeleteBorrowFormReq but is not nil && this == nil")
	}
	if this.BorrowFormID != that1.BorrowFormID {
		return fmt.Errorf("BorrowFormID this(%v) Not Equal that(%v)", this.BorrowFormID, that1.BorrowFormID)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *DeleteBorrowFormReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteBorrowFormReq)
	if !ok {
		that2, ok := that.(DeleteBorrowFormReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BorrowFormID != that1.BorrowFormID {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DeleteBorrowFormResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DeleteBorrowFormResp)
	if !ok {
		that2, ok := that.(DeleteBorrowFormResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DeleteBorrowFormResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DeleteBorrowFormResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DeleteBorrowFormResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *DeleteBorrowFormResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteBorrowFormResp)
	if !ok {
		that2, ok := that.(DeleteBorrowFormResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Doc) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&docmanagerModel.Doc{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DocVersion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&docmanagerModel.DocVersion{")
	s = append(s, "DocVer: "+fmt.Sprintf("%#v", this.DocVer)+",\n")
	s = append(s, "DocID: "+fmt.Sprintf("%#v", this.DocID)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "DocType: "+fmt.Sprintf("%#v", this.DocType)+",\n")
	s = append(s, "DocDescription: "+fmt.Sprintf("%#v", this.DocDescription)+",\n")
	s = append(s, "Fee: "+fmt.Sprintf("%#v", this.Fee)+",\n")
	s = append(s, "Price: "+fmt.Sprintf("%#v", this.Price)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Barcode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&docmanagerModel.Barcode{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "DocVer: "+fmt.Sprintf("%#v", this.DocVer)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Payment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&docmanagerModel.Payment{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Money: "+fmt.Sprintf("%#v", this.Money)+",\n")
	s = append(s, "Vendor: "+fmt.Sprintf("%#v", this.Vendor)+",\n")
	s = append(s, "BarcodeID: "+fmt.Sprintf("%#v", this.BarcodeID)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Receipt) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&docmanagerModel.Receipt{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "BorrowFormID: "+fmt.Sprintf("%#v", this.BorrowFormID)+",\n")
	s = append(s, "Money: "+fmt.Sprintf("%#v", this.Money)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BorrowForm) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&docmanagerModel.BorrowForm{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "LibrarianID: "+fmt.Sprintf("%#v", this.LibrarianID)+",\n")
	s = append(s, "BarcodeID: "+fmt.Sprintf("%#v", this.BarcodeID)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.StartTime != nil {
		s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	}
	if this.EndTime != nil {
		s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	}
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectAllBarcodeReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&docmanagerModel.SelectAllBarcodeReq{")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectAllBarcodeResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&docmanagerModel.SelectAllBarcodeResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.Barcodes != nil {
		s = append(s, "Barcodes: "+fmt.Sprintf("%#v", this.Barcodes)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectBarcodeByIDReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&docmanagerModel.SelectBarcodeByIDReq{")
	s = append(s, "BarcodeID: "+fmt.Sprintf("%#v", this.BarcodeID)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectBarcodeByIDResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&docmanagerModel.SelectBarcodeByIDResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.Barcode != nil {
		s = append(s, "Barcode: "+fmt.Sprintf("%#v", this.Barcode)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InsertBarcodeReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&docmanagerModel.InsertBarcodeReq{")
	if this.Barcode != nil {
		s = append(s, "Barcode: "+fmt.Sprintf("%#v", this.Barcode)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InsertBarcodeResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&docmanagerModel.InsertBarcodeResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateBarcodeReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&docmanagerModel.UpdateBarcodeReq{")
	if this.Barcode != nil {
		s = append(s, "Barcode: "+fmt.Sprintf("%#v", this.Barcode)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateBarcodeResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&docmanagerModel.UpdateBarcodeResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteBarcodeReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&docmanagerModel.DeleteBarcodeReq{")
	s = append(s, "BarcodeID: "+fmt.Sprintf("%#v", this.BarcodeID)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteBarcodeResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&docmanagerModel.DeleteBarcodeResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectAllBorrowFormReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&docmanagerModel.SelectAllBorrowFormReq{")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectAllBorrowFormResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&docmanagerModel.SelectAllBorrowFormResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.BorrowForms != nil {
		s = append(s, "BorrowForms: "+fmt.Sprintf("%#v", this.BorrowForms)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectBorrowFormByIDReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&docmanagerModel.SelectBorrowFormByIDReq{")
	s = append(s, "BorrowFormID: "+fmt.Sprintf("%#v", this.BorrowFormID)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectBorrowFormByIDResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&docmanagerModel.SelectBorrowFormByIDResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.Borrowform != nil {
		s = append(s, "Borrowform: "+fmt.Sprintf("%#v", this.Borrowform)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SaveBorrowFormReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&docmanagerModel.SaveBorrowFormReq{")
	if this.Borrowform != nil {
		s = append(s, "Borrowform: "+fmt.Sprintf("%#v", this.Borrowform)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SaveBorrowFormResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&docmanagerModel.SaveBorrowFormResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteBorrowFormReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&docmanagerModel.DeleteBorrowFormReq{")
	s = append(s, "BorrowFormID: "+fmt.Sprintf("%#v", this.BorrowFormID)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteBorrowFormResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&docmanagerModel.DeleteBorrowFormResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDocmanagerbutstrugglewithinstallgogofaster(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DocmanagerClient is the client API for Docmanager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DocmanagerClient interface {
	SelectAllBarcode(ctx context.Context, in *SelectAllBarcodeReq, opts ...grpc.CallOption) (*SelectAllBarcodeResp, error)
	SelectBarcodeByID(ctx context.Context, in *SelectBarcodeByIDReq, opts ...grpc.CallOption) (*SelectBarcodeByIDResp, error)
	InsertBarcode(ctx context.Context, in *InsertBarcodeReq, opts ...grpc.CallOption) (*InsertBarcodeResp, error)
	UpdateBarcode(ctx context.Context, in *UpdateBarcodeReq, opts ...grpc.CallOption) (*UpdateBarcodeResp, error)
	DeleteBarcode(ctx context.Context, in *DeleteBarcodeReq, opts ...grpc.CallOption) (*DeleteBarcodeResp, error)
	SelectAllBorrowForm(ctx context.Context, in *SelectAllBorrowFormReq, opts ...grpc.CallOption) (*SelectAllBorrowFormResp, error)
	SelectBorrowFormByID(ctx context.Context, in *SelectBorrowFormByIDReq, opts ...grpc.CallOption) (*SelectBorrowFormByIDResp, error)
	SaveBorrowForm(ctx context.Context, in *SaveBorrowFormReq, opts ...grpc.CallOption) (*SaveBorrowFormResp, error)
	DeleteBorrowForm(ctx context.Context, in *SaveBorrowFormReq, opts ...grpc.CallOption) (*SaveBorrowFormResp, error)
}

type docmanagerClient struct {
	cc *grpc.ClientConn
}

func NewDocmanagerClient(cc *grpc.ClientConn) DocmanagerClient {
	return &docmanagerClient{cc}
}

func (c *docmanagerClient) SelectAllBarcode(ctx context.Context, in *SelectAllBarcodeReq, opts ...grpc.CallOption) (*SelectAllBarcodeResp, error) {
	out := new(SelectAllBarcodeResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/SelectAllBarcode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) SelectBarcodeByID(ctx context.Context, in *SelectBarcodeByIDReq, opts ...grpc.CallOption) (*SelectBarcodeByIDResp, error) {
	out := new(SelectBarcodeByIDResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/SelectBarcodeByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) InsertBarcode(ctx context.Context, in *InsertBarcodeReq, opts ...grpc.CallOption) (*InsertBarcodeResp, error) {
	out := new(InsertBarcodeResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/InsertBarcode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) UpdateBarcode(ctx context.Context, in *UpdateBarcodeReq, opts ...grpc.CallOption) (*UpdateBarcodeResp, error) {
	out := new(UpdateBarcodeResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/UpdateBarcode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) DeleteBarcode(ctx context.Context, in *DeleteBarcodeReq, opts ...grpc.CallOption) (*DeleteBarcodeResp, error) {
	out := new(DeleteBarcodeResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/DeleteBarcode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) SelectAllBorrowForm(ctx context.Context, in *SelectAllBorrowFormReq, opts ...grpc.CallOption) (*SelectAllBorrowFormResp, error) {
	out := new(SelectAllBorrowFormResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/SelectAllBorrowForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) SelectBorrowFormByID(ctx context.Context, in *SelectBorrowFormByIDReq, opts ...grpc.CallOption) (*SelectBorrowFormByIDResp, error) {
	out := new(SelectBorrowFormByIDResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/SelectBorrowFormByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) SaveBorrowForm(ctx context.Context, in *SaveBorrowFormReq, opts ...grpc.CallOption) (*SaveBorrowFormResp, error) {
	out := new(SaveBorrowFormResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/SaveBorrowForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) DeleteBorrowForm(ctx context.Context, in *SaveBorrowFormReq, opts ...grpc.CallOption) (*SaveBorrowFormResp, error) {
	out := new(SaveBorrowFormResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/DeleteBorrowForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocmanagerServer is the server API for Docmanager service.
type DocmanagerServer interface {
	SelectAllBarcode(context.Context, *SelectAllBarcodeReq) (*SelectAllBarcodeResp, error)
	SelectBarcodeByID(context.Context, *SelectBarcodeByIDReq) (*SelectBarcodeByIDResp, error)
	InsertBarcode(context.Context, *InsertBarcodeReq) (*InsertBarcodeResp, error)
	UpdateBarcode(context.Context, *UpdateBarcodeReq) (*UpdateBarcodeResp, error)
	DeleteBarcode(context.Context, *DeleteBarcodeReq) (*DeleteBarcodeResp, error)
	SelectAllBorrowForm(context.Context, *SelectAllBorrowFormReq) (*SelectAllBorrowFormResp, error)
	SelectBorrowFormByID(context.Context, *SelectBorrowFormByIDReq) (*SelectBorrowFormByIDResp, error)
	SaveBorrowForm(context.Context, *SaveBorrowFormReq) (*SaveBorrowFormResp, error)
	DeleteBorrowForm(context.Context, *SaveBorrowFormReq) (*SaveBorrowFormResp, error)
}

// UnimplementedDocmanagerServer can be embedded to have forward compatible implementations.
type UnimplementedDocmanagerServer struct {
}

func (*UnimplementedDocmanagerServer) SelectAllBarcode(ctx context.Context, req *SelectAllBarcodeReq) (*SelectAllBarcodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectAllBarcode not implemented")
}
func (*UnimplementedDocmanagerServer) SelectBarcodeByID(ctx context.Context, req *SelectBarcodeByIDReq) (*SelectBarcodeByIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectBarcodeByID not implemented")
}
func (*UnimplementedDocmanagerServer) InsertBarcode(ctx context.Context, req *InsertBarcodeReq) (*InsertBarcodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertBarcode not implemented")
}
func (*UnimplementedDocmanagerServer) UpdateBarcode(ctx context.Context, req *UpdateBarcodeReq) (*UpdateBarcodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBarcode not implemented")
}
func (*UnimplementedDocmanagerServer) DeleteBarcode(ctx context.Context, req *DeleteBarcodeReq) (*DeleteBarcodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBarcode not implemented")
}
func (*UnimplementedDocmanagerServer) SelectAllBorrowForm(ctx context.Context, req *SelectAllBorrowFormReq) (*SelectAllBorrowFormResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectAllBorrowForm not implemented")
}
func (*UnimplementedDocmanagerServer) SelectBorrowFormByID(ctx context.Context, req *SelectBorrowFormByIDReq) (*SelectBorrowFormByIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectBorrowFormByID not implemented")
}
func (*UnimplementedDocmanagerServer) SaveBorrowForm(ctx context.Context, req *SaveBorrowFormReq) (*SaveBorrowFormResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBorrowForm not implemented")
}
func (*UnimplementedDocmanagerServer) DeleteBorrowForm(ctx context.Context, req *SaveBorrowFormReq) (*SaveBorrowFormResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBorrowForm not implemented")
}

func RegisterDocmanagerServer(s *grpc.Server, srv DocmanagerServer) {
	s.RegisterService(&_Docmanager_serviceDesc, srv)
}

func _Docmanager_SelectAllBarcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectAllBarcodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).SelectAllBarcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/SelectAllBarcode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).SelectAllBarcode(ctx, req.(*SelectAllBarcodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_SelectBarcodeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectBarcodeByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).SelectBarcodeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/SelectBarcodeByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).SelectBarcodeByID(ctx, req.(*SelectBarcodeByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_InsertBarcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertBarcodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).InsertBarcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/InsertBarcode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).InsertBarcode(ctx, req.(*InsertBarcodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_UpdateBarcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBarcodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).UpdateBarcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/UpdateBarcode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).UpdateBarcode(ctx, req.(*UpdateBarcodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_DeleteBarcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBarcodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).DeleteBarcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/DeleteBarcode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).DeleteBarcode(ctx, req.(*DeleteBarcodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_SelectAllBorrowForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectAllBorrowFormReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).SelectAllBorrowForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/SelectAllBorrowForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).SelectAllBorrowForm(ctx, req.(*SelectAllBorrowFormReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_SelectBorrowFormByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectBorrowFormByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).SelectBorrowFormByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/SelectBorrowFormByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).SelectBorrowFormByID(ctx, req.(*SelectBorrowFormByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_SaveBorrowForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveBorrowFormReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).SaveBorrowForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/SaveBorrowForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).SaveBorrowForm(ctx, req.(*SaveBorrowFormReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_DeleteBorrowForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveBorrowFormReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).DeleteBorrowForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/DeleteBorrowForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).DeleteBorrowForm(ctx, req.(*SaveBorrowFormReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Docmanager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.Docmanager",
	HandlerType: (*DocmanagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SelectAllBarcode",
			Handler:    _Docmanager_SelectAllBarcode_Handler,
		},
		{
			MethodName: "SelectBarcodeByID",
			Handler:    _Docmanager_SelectBarcodeByID_Handler,
		},
		{
			MethodName: "InsertBarcode",
			Handler:    _Docmanager_InsertBarcode_Handler,
		},
		{
			MethodName: "UpdateBarcode",
			Handler:    _Docmanager_UpdateBarcode_Handler,
		},
		{
			MethodName: "DeleteBarcode",
			Handler:    _Docmanager_DeleteBarcode_Handler,
		},
		{
			MethodName: "SelectAllBorrowForm",
			Handler:    _Docmanager_SelectAllBorrowForm_Handler,
		},
		{
			MethodName: "SelectBorrowFormByID",
			Handler:    _Docmanager_SelectBorrowFormByID_Handler,
		},
		{
			MethodName: "SaveBorrowForm",
			Handler:    _Docmanager_SaveBorrowForm_Handler,
		},
		{
			MethodName: "DeleteBorrowForm",
			Handler:    _Docmanager_DeleteBorrowForm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/pinezapple/LibraryProject20201/skeleton/model/docmanagerbutstrugglewithinstallgogofaster.proto",
}

func (m *Doc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Doc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Doc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DocVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DocVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Price != 0 {
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x38
	}
	if m.Fee != 0 {
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(m.Fee))
		i--
		dAtA[i] = 0x30
	}
	if len(m.DocDescription) > 0 {
		i -= len(m.DocDescription)
		copy(dAtA[i:], m.DocDescription)
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(len(m.DocDescription)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DocType) > 0 {
		i -= len(m.DocType)
		copy(dAtA[i:], m.DocType)
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(len(m.DocType)))
		i--
		dAtA[i] = 0x22
	}
	if m.Version != 0 {
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x18
	}
	if m.DocID != 0 {
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(m.DocID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DocVer) > 0 {
		i -= len(m.DocVer)
		copy(dAtA[i:], m.DocVer)
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(len(m.DocVer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Barcode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Barcode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Barcode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Status != 0 {
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DocVer) > 0 {
		i -= len(m.DocVer)
		copy(dAtA[i:], m.DocVer)
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(len(m.DocVer)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Payment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Payment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Payment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.BarcodeID != 0 {
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(m.BarcodeID))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Vendor) > 0 {
		i -= len(m.Vendor)
		copy(dAtA[i:], m.Vendor)
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(len(m.Vendor)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Money != 0 {
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(m.Money))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Receipt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Receipt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Receipt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Money != 0 {
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(m.Money))
		i--
		dAtA[i] = 0x18
	}
	if m.BorrowFormID != 0 {
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(m.BorrowFormID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BorrowForm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BorrowForm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BorrowForm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.EndTime != nil {
		{
			size, err := m.EndTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.StartTime != nil {
		{
			size, err := m.StartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != 0 {
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.BarcodeID != 0 {
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(m.BarcodeID))
		i--
		dAtA[i] = 0x18
	}
	if m.LibrarianID != 0 {
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(m.LibrarianID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectAllBarcodeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectAllBarcodeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectAllBarcodeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *SelectAllBarcodeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectAllBarcodeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectAllBarcodeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Barcodes) > 0 {
		for iNdEx := len(m.Barcodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Barcodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectBarcodeByIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectBarcodeByIDReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectBarcodeByIDReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BarcodeID != 0 {
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(m.BarcodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectBarcodeByIDResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectBarcodeByIDResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectBarcodeByIDResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Barcode != nil {
		{
			size, err := m.Barcode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InsertBarcodeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InsertBarcodeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InsertBarcodeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Barcode != nil {
		{
			size, err := m.Barcode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InsertBarcodeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InsertBarcodeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InsertBarcodeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateBarcodeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBarcodeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBarcodeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Barcode != nil {
		{
			size, err := m.Barcode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateBarcodeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateBarcodeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateBarcodeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteBarcodeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteBarcodeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteBarcodeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BarcodeID != 0 {
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(m.BarcodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteBarcodeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteBarcodeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteBarcodeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectAllBorrowFormReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectAllBorrowFormReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectAllBorrowFormReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *SelectAllBorrowFormResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectAllBorrowFormResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectAllBorrowFormResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BorrowForms) > 0 {
		for iNdEx := len(m.BorrowForms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BorrowForms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectBorrowFormByIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectBorrowFormByIDReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectBorrowFormByIDReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BorrowFormID != 0 {
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(m.BorrowFormID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectBorrowFormByIDResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectBorrowFormByIDResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectBorrowFormByIDResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Borrowform != nil {
		{
			size, err := m.Borrowform.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SaveBorrowFormReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveBorrowFormReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveBorrowFormReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Borrowform != nil {
		{
			size, err := m.Borrowform.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SaveBorrowFormResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveBorrowFormResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveBorrowFormResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteBorrowFormReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteBorrowFormReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteBorrowFormReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BorrowFormID != 0 {
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(m.BorrowFormID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteBorrowFormResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteBorrowFormResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteBorrowFormResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDocmanagerbutstrugglewithinstallgogofaster(dAtA []byte, offset int, v uint64) int {
	offset -= sovDocmanagerbutstrugglewithinstallgogofaster(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedDoc(r randyDocmanagerbutstrugglewithinstallgogofaster, easy bool) *Doc {
	this := &Doc{}
	this.ID = uint64(uint64(r.Uint32()))
	this.Name = string(randStringDocmanagerbutstrugglewithinstallgogofaster(r))
	if r.Intn(5) != 0 {
		this.CreatedAt = model.NewPopulatedTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.UpdatedAt = model.NewPopulatedTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDocmanagerbutstrugglewithinstallgogofaster(r, 5)
	}
	return this
}

func NewPopulatedDocVersion(r randyDocmanagerbutstrugglewithinstallgogofaster, easy bool) *DocVersion {
	this := &DocVersion{}
	this.DocVer = string(randStringDocmanagerbutstrugglewithinstallgogofaster(r))
	this.DocID = uint64(uint64(r.Uint32()))
	this.Version = uint64(uint64(r.Uint32()))
	this.DocType = string(randStringDocmanagerbutstrugglewithinstallgogofaster(r))
	this.DocDescription = string(randStringDocmanagerbutstrugglewithinstallgogofaster(r))
	this.Fee = uint64(uint64(r.Uint32()))
	this.Price = uint64(uint64(r.Uint32()))
	if r.Intn(5) != 0 {
		this.CreatedAt = model.NewPopulatedTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.UpdatedAt = model.NewPopulatedTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDocmanagerbutstrugglewithinstallgogofaster(r, 10)
	}
	return this
}

func NewPopulatedBarcode(r randyDocmanagerbutstrugglewithinstallgogofaster, easy bool) *Barcode {
	this := &Barcode{}
	this.ID = uint64(uint64(r.Uint32()))
	this.DocVer = string(randStringDocmanagerbutstrugglewithinstallgogofaster(r))
	this.Status = uint64(uint64(r.Uint32()))
	if r.Intn(5) != 0 {
		this.CreatedAt = model.NewPopulatedTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.UpdatedAt = model.NewPopulatedTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDocmanagerbutstrugglewithinstallgogofaster(r, 6)
	}
	return this
}

func NewPopulatedPayment(r randyDocmanagerbutstrugglewithinstallgogofaster, easy bool) *Payment {
	this := &Payment{}
	this.ID = uint64(uint64(r.Uint32()))
	this.Money = uint64(uint64(r.Uint32()))
	this.Vendor = string(randStringDocmanagerbutstrugglewithinstallgogofaster(r))
	this.BarcodeID = uint64(uint64(r.Uint32()))
	if r.Intn(5) != 0 {
		this.CreatedAt = model.NewPopulatedTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.UpdatedAt = model.NewPopulatedTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDocmanagerbutstrugglewithinstallgogofaster(r, 7)
	}
	return this
}

func NewPopulatedReceipt(r randyDocmanagerbutstrugglewithinstallgogofaster, easy bool) *Receipt {
	this := &Receipt{}
	this.ID = uint64(uint64(r.Uint32()))
	this.BorrowFormID = uint64(uint64(r.Uint32()))
	this.Money = uint64(uint64(r.Uint32()))
	if r.Intn(5) != 0 {
		this.CreatedAt = model.NewPopulatedTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.UpdatedAt = model.NewPopulatedTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDocmanagerbutstrugglewithinstallgogofaster(r, 6)
	}
	return this
}

func NewPopulatedBorrowForm(r randyDocmanagerbutstrugglewithinstallgogofaster, easy bool) *BorrowForm {
	this := &BorrowForm{}
	this.ID = uint64(uint64(r.Uint32()))
	this.LibrarianID = uint64(uint64(r.Uint32()))
	this.BarcodeID = uint64(uint64(r.Uint32()))
	this.Status = uint64(uint64(r.Uint32()))
	if r.Intn(5) != 0 {
		this.StartTime = model.NewPopulatedTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.EndTime = model.NewPopulatedTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.CreatedAt = model.NewPopulatedTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.UpdatedAt = model.NewPopulatedTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDocmanagerbutstrugglewithinstallgogofaster(r, 9)
	}
	return this
}

func NewPopulatedSelectAllBarcodeReq(r randyDocmanagerbutstrugglewithinstallgogofaster, easy bool) *SelectAllBarcodeReq {
	this := &SelectAllBarcodeReq{}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDocmanagerbutstrugglewithinstallgogofaster(r, 1)
	}
	return this
}

func NewPopulatedSelectAllBarcodeResp(r randyDocmanagerbutstrugglewithinstallgogofaster, easy bool) *SelectAllBarcodeResp {
	this := &SelectAllBarcodeResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanagerbutstrugglewithinstallgogofaster(r))
	if r.Intn(5) != 0 {
		v1 := r.Intn(5)
		this.Barcodes = make([]*Barcode, v1)
		for i := 0; i < v1; i++ {
			this.Barcodes[i] = NewPopulatedBarcode(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDocmanagerbutstrugglewithinstallgogofaster(r, 4)
	}
	return this
}

func NewPopulatedSelectBarcodeByIDReq(r randyDocmanagerbutstrugglewithinstallgogofaster, easy bool) *SelectBarcodeByIDReq {
	this := &SelectBarcodeByIDReq{}
	this.BarcodeID = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDocmanagerbutstrugglewithinstallgogofaster(r, 2)
	}
	return this
}

func NewPopulatedSelectBarcodeByIDResp(r randyDocmanagerbutstrugglewithinstallgogofaster, easy bool) *SelectBarcodeByIDResp {
	this := &SelectBarcodeByIDResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanagerbutstrugglewithinstallgogofaster(r))
	if r.Intn(5) != 0 {
		this.Barcode = NewPopulatedBarcode(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDocmanagerbutstrugglewithinstallgogofaster(r, 4)
	}
	return this
}

func NewPopulatedInsertBarcodeReq(r randyDocmanagerbutstrugglewithinstallgogofaster, easy bool) *InsertBarcodeReq {
	this := &InsertBarcodeReq{}
	if r.Intn(5) != 0 {
		this.Barcode = NewPopulatedBarcode(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDocmanagerbutstrugglewithinstallgogofaster(r, 2)
	}
	return this
}

func NewPopulatedInsertBarcodeResp(r randyDocmanagerbutstrugglewithinstallgogofaster, easy bool) *InsertBarcodeResp {
	this := &InsertBarcodeResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanagerbutstrugglewithinstallgogofaster(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDocmanagerbutstrugglewithinstallgogofaster(r, 3)
	}
	return this
}

func NewPopulatedUpdateBarcodeReq(r randyDocmanagerbutstrugglewithinstallgogofaster, easy bool) *UpdateBarcodeReq {
	this := &UpdateBarcodeReq{}
	if r.Intn(5) != 0 {
		this.Barcode = NewPopulatedBarcode(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDocmanagerbutstrugglewithinstallgogofaster(r, 2)
	}
	return this
}

func NewPopulatedUpdateBarcodeResp(r randyDocmanagerbutstrugglewithinstallgogofaster, easy bool) *UpdateBarcodeResp {
	this := &UpdateBarcodeResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanagerbutstrugglewithinstallgogofaster(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDocmanagerbutstrugglewithinstallgogofaster(r, 3)
	}
	return this
}

func NewPopulatedDeleteBarcodeReq(r randyDocmanagerbutstrugglewithinstallgogofaster, easy bool) *DeleteBarcodeReq {
	this := &DeleteBarcodeReq{}
	this.BarcodeID = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDocmanagerbutstrugglewithinstallgogofaster(r, 2)
	}
	return this
}

func NewPopulatedDeleteBarcodeResp(r randyDocmanagerbutstrugglewithinstallgogofaster, easy bool) *DeleteBarcodeResp {
	this := &DeleteBarcodeResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanagerbutstrugglewithinstallgogofaster(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDocmanagerbutstrugglewithinstallgogofaster(r, 3)
	}
	return this
}

func NewPopulatedSelectAllBorrowFormReq(r randyDocmanagerbutstrugglewithinstallgogofaster, easy bool) *SelectAllBorrowFormReq {
	this := &SelectAllBorrowFormReq{}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDocmanagerbutstrugglewithinstallgogofaster(r, 1)
	}
	return this
}

func NewPopulatedSelectAllBorrowFormResp(r randyDocmanagerbutstrugglewithinstallgogofaster, easy bool) *SelectAllBorrowFormResp {
	this := &SelectAllBorrowFormResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanagerbutstrugglewithinstallgogofaster(r))
	if r.Intn(5) != 0 {
		v2 := r.Intn(5)
		this.BorrowForms = make([]*BorrowForm, v2)
		for i := 0; i < v2; i++ {
			this.BorrowForms[i] = NewPopulatedBorrowForm(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDocmanagerbutstrugglewithinstallgogofaster(r, 4)
	}
	return this
}

func NewPopulatedSelectBorrowFormByIDReq(r randyDocmanagerbutstrugglewithinstallgogofaster, easy bool) *SelectBorrowFormByIDReq {
	this := &SelectBorrowFormByIDReq{}
	this.BorrowFormID = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDocmanagerbutstrugglewithinstallgogofaster(r, 2)
	}
	return this
}

func NewPopulatedSelectBorrowFormByIDResp(r randyDocmanagerbutstrugglewithinstallgogofaster, easy bool) *SelectBorrowFormByIDResp {
	this := &SelectBorrowFormByIDResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanagerbutstrugglewithinstallgogofaster(r))
	if r.Intn(5) != 0 {
		this.Borrowform = NewPopulatedBorrowForm(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDocmanagerbutstrugglewithinstallgogofaster(r, 4)
	}
	return this
}

func NewPopulatedSaveBorrowFormReq(r randyDocmanagerbutstrugglewithinstallgogofaster, easy bool) *SaveBorrowFormReq {
	this := &SaveBorrowFormReq{}
	if r.Intn(5) != 0 {
		this.Borrowform = NewPopulatedBorrowForm(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDocmanagerbutstrugglewithinstallgogofaster(r, 2)
	}
	return this
}

func NewPopulatedSaveBorrowFormResp(r randyDocmanagerbutstrugglewithinstallgogofaster, easy bool) *SaveBorrowFormResp {
	this := &SaveBorrowFormResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanagerbutstrugglewithinstallgogofaster(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDocmanagerbutstrugglewithinstallgogofaster(r, 3)
	}
	return this
}

func NewPopulatedDeleteBorrowFormReq(r randyDocmanagerbutstrugglewithinstallgogofaster, easy bool) *DeleteBorrowFormReq {
	this := &DeleteBorrowFormReq{}
	this.BorrowFormID = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDocmanagerbutstrugglewithinstallgogofaster(r, 2)
	}
	return this
}

func NewPopulatedDeleteBorrowFormResp(r randyDocmanagerbutstrugglewithinstallgogofaster, easy bool) *DeleteBorrowFormResp {
	this := &DeleteBorrowFormResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanagerbutstrugglewithinstallgogofaster(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDocmanagerbutstrugglewithinstallgogofaster(r, 3)
	}
	return this
}

type randyDocmanagerbutstrugglewithinstallgogofaster interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneDocmanagerbutstrugglewithinstallgogofaster(r randyDocmanagerbutstrugglewithinstallgogofaster) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringDocmanagerbutstrugglewithinstallgogofaster(r randyDocmanagerbutstrugglewithinstallgogofaster) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneDocmanagerbutstrugglewithinstallgogofaster(r)
	}
	return string(tmps)
}
func randUnrecognizedDocmanagerbutstrugglewithinstallgogofaster(r randyDocmanagerbutstrugglewithinstallgogofaster, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldDocmanagerbutstrugglewithinstallgogofaster(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldDocmanagerbutstrugglewithinstallgogofaster(dAtA []byte, r randyDocmanagerbutstrugglewithinstallgogofaster, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateDocmanagerbutstrugglewithinstallgogofaster(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateDocmanagerbutstrugglewithinstallgogofaster(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateDocmanagerbutstrugglewithinstallgogofaster(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateDocmanagerbutstrugglewithinstallgogofaster(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateDocmanagerbutstrugglewithinstallgogofaster(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateDocmanagerbutstrugglewithinstallgogofaster(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateDocmanagerbutstrugglewithinstallgogofaster(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Doc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DocVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DocVer)
	if l > 0 {
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if m.DocID != 0 {
		n += 1 + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(m.DocID))
	}
	if m.Version != 0 {
		n += 1 + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(m.Version))
	}
	l = len(m.DocType)
	if l > 0 {
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	l = len(m.DocDescription)
	if l > 0 {
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if m.Fee != 0 {
		n += 1 + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(m.Fee))
	}
	if m.Price != 0 {
		n += 1 + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(m.Price))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Barcode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(m.ID))
	}
	l = len(m.DocVer)
	if l > 0 {
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(m.Status))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Payment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(m.ID))
	}
	if m.Money != 0 {
		n += 1 + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(m.Money))
	}
	l = len(m.Vendor)
	if l > 0 {
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if m.BarcodeID != 0 {
		n += 1 + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(m.BarcodeID))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Receipt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(m.ID))
	}
	if m.BorrowFormID != 0 {
		n += 1 + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(m.BorrowFormID))
	}
	if m.Money != 0 {
		n += 1 + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(m.Money))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BorrowForm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(m.ID))
	}
	if m.LibrarianID != 0 {
		n += 1 + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(m.LibrarianID))
	}
	if m.BarcodeID != 0 {
		n += 1 + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(m.BarcodeID))
	}
	if m.Status != 0 {
		n += 1 + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(m.Status))
	}
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if m.EndTime != nil {
		l = m.EndTime.Size()
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SelectAllBarcodeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SelectAllBarcodeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if len(m.Barcodes) > 0 {
		for _, e := range m.Barcodes {
			l = e.Size()
			n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SelectBarcodeByIDReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BarcodeID != 0 {
		n += 1 + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(m.BarcodeID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SelectBarcodeByIDResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if m.Barcode != nil {
		l = m.Barcode.Size()
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InsertBarcodeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Barcode != nil {
		l = m.Barcode.Size()
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InsertBarcodeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateBarcodeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Barcode != nil {
		l = m.Barcode.Size()
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateBarcodeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteBarcodeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BarcodeID != 0 {
		n += 1 + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(m.BarcodeID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteBarcodeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SelectAllBorrowFormReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SelectAllBorrowFormResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if len(m.BorrowForms) > 0 {
		for _, e := range m.BorrowForms {
			l = e.Size()
			n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SelectBorrowFormByIDReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BorrowFormID != 0 {
		n += 1 + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(m.BorrowFormID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SelectBorrowFormByIDResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if m.Borrowform != nil {
		l = m.Borrowform.Size()
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SaveBorrowFormReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Borrowform != nil {
		l = m.Borrowform.Size()
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SaveBorrowFormResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteBorrowFormReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BorrowFormID != 0 {
		n += 1 + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(m.BorrowFormID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteBorrowFormResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanagerbutstrugglewithinstallgogofaster(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDocmanagerbutstrugglewithinstallgogofaster(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDocmanagerbutstrugglewithinstallgogofaster(x uint64) (n int) {
	return sovDocmanagerbutstrugglewithinstallgogofaster(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Doc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Doc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Doc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &model.Time{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &model.Time{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanagerbutstrugglewithinstallgogofaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocVer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocVer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocID", wireType)
			}
			m.DocID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DocID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			m.Fee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &model.Time{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &model.Time{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanagerbutstrugglewithinstallgogofaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Barcode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Barcode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Barcode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocVer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocVer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &model.Time{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &model.Time{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanagerbutstrugglewithinstallgogofaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Payment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Payment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Payment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			m.Money = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Money |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vendor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vendor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BarcodeID", wireType)
			}
			m.BarcodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BarcodeID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &model.Time{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &model.Time{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanagerbutstrugglewithinstallgogofaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Receipt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Receipt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Receipt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowFormID", wireType)
			}
			m.BorrowFormID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BorrowFormID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			m.Money = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Money |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &model.Time{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &model.Time{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanagerbutstrugglewithinstallgogofaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BorrowForm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BorrowForm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BorrowForm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LibrarianID", wireType)
			}
			m.LibrarianID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LibrarianID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BarcodeID", wireType)
			}
			m.BarcodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BarcodeID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &model.Time{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = &model.Time{}
			}
			if err := m.EndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &model.Time{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &model.Time{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanagerbutstrugglewithinstallgogofaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectAllBarcodeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectAllBarcodeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectAllBarcodeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanagerbutstrugglewithinstallgogofaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectAllBarcodeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectAllBarcodeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectAllBarcodeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Barcodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Barcodes = append(m.Barcodes, &Barcode{})
			if err := m.Barcodes[len(m.Barcodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanagerbutstrugglewithinstallgogofaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectBarcodeByIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectBarcodeByIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectBarcodeByIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BarcodeID", wireType)
			}
			m.BarcodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BarcodeID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanagerbutstrugglewithinstallgogofaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectBarcodeByIDResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectBarcodeByIDResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectBarcodeByIDResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Barcode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Barcode == nil {
				m.Barcode = &Barcode{}
			}
			if err := m.Barcode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanagerbutstrugglewithinstallgogofaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InsertBarcodeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InsertBarcodeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InsertBarcodeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Barcode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Barcode == nil {
				m.Barcode = &Barcode{}
			}
			if err := m.Barcode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanagerbutstrugglewithinstallgogofaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InsertBarcodeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InsertBarcodeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InsertBarcodeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanagerbutstrugglewithinstallgogofaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBarcodeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBarcodeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBarcodeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Barcode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Barcode == nil {
				m.Barcode = &Barcode{}
			}
			if err := m.Barcode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanagerbutstrugglewithinstallgogofaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateBarcodeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateBarcodeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateBarcodeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanagerbutstrugglewithinstallgogofaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteBarcodeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteBarcodeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteBarcodeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BarcodeID", wireType)
			}
			m.BarcodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BarcodeID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanagerbutstrugglewithinstallgogofaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteBarcodeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteBarcodeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteBarcodeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanagerbutstrugglewithinstallgogofaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectAllBorrowFormReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectAllBorrowFormReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectAllBorrowFormReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanagerbutstrugglewithinstallgogofaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectAllBorrowFormResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectAllBorrowFormResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectAllBorrowFormResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowForms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorrowForms = append(m.BorrowForms, &BorrowForm{})
			if err := m.BorrowForms[len(m.BorrowForms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanagerbutstrugglewithinstallgogofaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectBorrowFormByIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectBorrowFormByIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectBorrowFormByIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowFormID", wireType)
			}
			m.BorrowFormID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BorrowFormID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanagerbutstrugglewithinstallgogofaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectBorrowFormByIDResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectBorrowFormByIDResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectBorrowFormByIDResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Borrowform", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Borrowform == nil {
				m.Borrowform = &BorrowForm{}
			}
			if err := m.Borrowform.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanagerbutstrugglewithinstallgogofaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveBorrowFormReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveBorrowFormReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveBorrowFormReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Borrowform", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Borrowform == nil {
				m.Borrowform = &BorrowForm{}
			}
			if err := m.Borrowform.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanagerbutstrugglewithinstallgogofaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveBorrowFormResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveBorrowFormResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveBorrowFormResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanagerbutstrugglewithinstallgogofaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteBorrowFormReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteBorrowFormReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteBorrowFormReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowFormID", wireType)
			}
			m.BorrowFormID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BorrowFormID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanagerbutstrugglewithinstallgogofaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteBorrowFormResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteBorrowFormResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteBorrowFormResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanagerbutstrugglewithinstallgogofaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDocmanagerbutstrugglewithinstallgogofaster(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDocmanagerbutstrugglewithinstallgogofaster
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDocmanagerbutstrugglewithinstallgogofaster        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDocmanagerbutstrugglewithinstallgogofaster          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDocmanagerbutstrugglewithinstallgogofaster = fmt.Errorf("proto: unexpected end of group")
)
