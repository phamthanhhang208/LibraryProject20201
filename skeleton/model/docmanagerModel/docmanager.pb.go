// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/pinezapple/LibraryProject20201/skeleton/model/docmanager.proto

package docmanagerModel

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Doc struct {
	ID          uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"id_doc" db:"id_doc"`
	Name        string `protobuf:"bytes,2,opt,name=Name,proto3" json:"doc_name" db:"doc_name"`
	Author      string `protobuf:"bytes,3,opt,name=Author,proto3" json:"doc_author" db:"doc_author"`
	Type        string `protobuf:"bytes,4,opt,name=Type,proto3" json:"doc_type" db:"doc_type"`
	Description string `protobuf:"bytes,5,opt,name=Description,proto3" json:"doc_description" db:"doc_description"`
	Status      uint32 `protobuf:"varint,6,opt,name=Status,proto3" json:"status" db:"status"`
	Fee         uint32 `protobuf:"varint,7,opt,name=Fee,proto3" json:"fee" db:"fee"`
	CreatedAt   string `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at" db:"created_at"`
	UpdatedAt   string `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at" db:"updated_at"`
}

func (m *Doc) Reset()         { *m = Doc{} }
func (m *Doc) String() string { return proto.CompactTextString(m) }
func (*Doc) ProtoMessage()    {}
func (*Doc) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{0}
}
func (m *Doc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Doc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Doc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Doc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Doc.Merge(m, src)
}
func (m *Doc) XXX_Size() int {
	return m.Size()
}
func (m *Doc) XXX_DiscardUnknown() {
	xxx_messageInfo_Doc.DiscardUnknown(m)
}

var xxx_messageInfo_Doc proto.InternalMessageInfo

func (m *Doc) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Doc) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Doc) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Doc) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Doc) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Doc) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Doc) GetFee() uint32 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *Doc) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Doc) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

type SelectAllDocReq struct {
}

func (m *SelectAllDocReq) Reset()         { *m = SelectAllDocReq{} }
func (m *SelectAllDocReq) String() string { return proto.CompactTextString(m) }
func (*SelectAllDocReq) ProtoMessage()    {}
func (*SelectAllDocReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{1}
}
func (m *SelectAllDocReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectAllDocReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectAllDocReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectAllDocReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectAllDocReq.Merge(m, src)
}
func (m *SelectAllDocReq) XXX_Size() int {
	return m.Size()
}
func (m *SelectAllDocReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectAllDocReq.DiscardUnknown(m)
}

var xxx_messageInfo_SelectAllDocReq proto.InternalMessageInfo

type SelectAllDocResp struct {
	Code      int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Documents []*Doc `protobuf:"bytes,3,rep,name=documents,proto3" json:"documents,omitempty"`
}

func (m *SelectAllDocResp) Reset()         { *m = SelectAllDocResp{} }
func (m *SelectAllDocResp) String() string { return proto.CompactTextString(m) }
func (*SelectAllDocResp) ProtoMessage()    {}
func (*SelectAllDocResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{2}
}
func (m *SelectAllDocResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectAllDocResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectAllDocResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectAllDocResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectAllDocResp.Merge(m, src)
}
func (m *SelectAllDocResp) XXX_Size() int {
	return m.Size()
}
func (m *SelectAllDocResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectAllDocResp.DiscardUnknown(m)
}

var xxx_messageInfo_SelectAllDocResp proto.InternalMessageInfo

func (m *SelectAllDocResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SelectAllDocResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SelectAllDocResp) GetDocuments() []*Doc {
	if m != nil {
		return m.Documents
	}
	return nil
}

type SelectDocByIDReq struct {
	DocID uint64 `protobuf:"varint,1,opt,name=DocID,proto3" json:"DocID,omitempty"`
}

func (m *SelectDocByIDReq) Reset()         { *m = SelectDocByIDReq{} }
func (m *SelectDocByIDReq) String() string { return proto.CompactTextString(m) }
func (*SelectDocByIDReq) ProtoMessage()    {}
func (*SelectDocByIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{3}
}
func (m *SelectDocByIDReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectDocByIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectDocByIDReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectDocByIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectDocByIDReq.Merge(m, src)
}
func (m *SelectDocByIDReq) XXX_Size() int {
	return m.Size()
}
func (m *SelectDocByIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectDocByIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_SelectDocByIDReq proto.InternalMessageInfo

func (m *SelectDocByIDReq) GetDocID() uint64 {
	if m != nil {
		return m.DocID
	}
	return 0
}

type SelectDocByIDResp struct {
	Code      int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Documents *Doc   `protobuf:"bytes,3,opt,name=documents,proto3" json:"documents,omitempty"`
}

func (m *SelectDocByIDResp) Reset()         { *m = SelectDocByIDResp{} }
func (m *SelectDocByIDResp) String() string { return proto.CompactTextString(m) }
func (*SelectDocByIDResp) ProtoMessage()    {}
func (*SelectDocByIDResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{4}
}
func (m *SelectDocByIDResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SelectDocByIDResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SelectDocByIDResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SelectDocByIDResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectDocByIDResp.Merge(m, src)
}
func (m *SelectDocByIDResp) XXX_Size() int {
	return m.Size()
}
func (m *SelectDocByIDResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectDocByIDResp.DiscardUnknown(m)
}

var xxx_messageInfo_SelectDocByIDResp proto.InternalMessageInfo

func (m *SelectDocByIDResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SelectDocByIDResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SelectDocByIDResp) GetDocuments() *Doc {
	if m != nil {
		return m.Documents
	}
	return nil
}

type SaveDocReq struct {
	Doc *Doc `protobuf:"bytes,1,opt,name=doc,proto3" json:"doc,omitempty"`
}

func (m *SaveDocReq) Reset()         { *m = SaveDocReq{} }
func (m *SaveDocReq) String() string { return proto.CompactTextString(m) }
func (*SaveDocReq) ProtoMessage()    {}
func (*SaveDocReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{5}
}
func (m *SaveDocReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveDocReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveDocReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveDocReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveDocReq.Merge(m, src)
}
func (m *SaveDocReq) XXX_Size() int {
	return m.Size()
}
func (m *SaveDocReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveDocReq.DiscardUnknown(m)
}

var xxx_messageInfo_SaveDocReq proto.InternalMessageInfo

func (m *SaveDocReq) GetDoc() *Doc {
	if m != nil {
		return m.Doc
	}
	return nil
}

type SaveDocResp struct {
	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *SaveDocResp) Reset()         { *m = SaveDocResp{} }
func (m *SaveDocResp) String() string { return proto.CompactTextString(m) }
func (*SaveDocResp) ProtoMessage()    {}
func (*SaveDocResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{6}
}
func (m *SaveDocResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveDocResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveDocResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveDocResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveDocResp.Merge(m, src)
}
func (m *SaveDocResp) XXX_Size() int {
	return m.Size()
}
func (m *SaveDocResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveDocResp.DiscardUnknown(m)
}

var xxx_messageInfo_SaveDocResp proto.InternalMessageInfo

func (m *SaveDocResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SaveDocResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type UpdateDocReq struct {
	Doc *Doc `protobuf:"bytes,1,opt,name=doc,proto3" json:"doc,omitempty"`
}

func (m *UpdateDocReq) Reset()         { *m = UpdateDocReq{} }
func (m *UpdateDocReq) String() string { return proto.CompactTextString(m) }
func (*UpdateDocReq) ProtoMessage()    {}
func (*UpdateDocReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{7}
}
func (m *UpdateDocReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDocReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDocReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDocReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDocReq.Merge(m, src)
}
func (m *UpdateDocReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDocReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDocReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDocReq proto.InternalMessageInfo

func (m *UpdateDocReq) GetDoc() *Doc {
	if m != nil {
		return m.Doc
	}
	return nil
}

type UpdateDocResp struct {
	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *UpdateDocResp) Reset()         { *m = UpdateDocResp{} }
func (m *UpdateDocResp) String() string { return proto.CompactTextString(m) }
func (*UpdateDocResp) ProtoMessage()    {}
func (*UpdateDocResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{8}
}
func (m *UpdateDocResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDocResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDocResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDocResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDocResp.Merge(m, src)
}
func (m *UpdateDocResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDocResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDocResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDocResp proto.InternalMessageInfo

func (m *UpdateDocResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UpdateDocResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteDocReq struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DeleteDocReq) Reset()         { *m = DeleteDocReq{} }
func (m *DeleteDocReq) String() string { return proto.CompactTextString(m) }
func (*DeleteDocReq) ProtoMessage()    {}
func (*DeleteDocReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{9}
}
func (m *DeleteDocReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteDocReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteDocReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteDocReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteDocReq.Merge(m, src)
}
func (m *DeleteDocReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteDocReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteDocReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteDocReq proto.InternalMessageInfo

func (m *DeleteDocReq) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteDocResp struct {
	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *DeleteDocResp) Reset()         { *m = DeleteDocResp{} }
func (m *DeleteDocResp) String() string { return proto.CompactTextString(m) }
func (*DeleteDocResp) ProtoMessage()    {}
func (*DeleteDocResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bc93e03df457931, []int{10}
}
func (m *DeleteDocResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteDocResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteDocResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteDocResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteDocResp.Merge(m, src)
}
func (m *DeleteDocResp) XXX_Size() int {
	return m.Size()
}
func (m *DeleteDocResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteDocResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteDocResp proto.InternalMessageInfo

func (m *DeleteDocResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DeleteDocResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Doc)(nil), "model.Doc")
	proto.RegisterType((*SelectAllDocReq)(nil), "model.SelectAllDocReq")
	proto.RegisterType((*SelectAllDocResp)(nil), "model.SelectAllDocResp")
	proto.RegisterType((*SelectDocByIDReq)(nil), "model.SelectDocByIDReq")
	proto.RegisterType((*SelectDocByIDResp)(nil), "model.SelectDocByIDResp")
	proto.RegisterType((*SaveDocReq)(nil), "model.SaveDocReq")
	proto.RegisterType((*SaveDocResp)(nil), "model.SaveDocResp")
	proto.RegisterType((*UpdateDocReq)(nil), "model.UpdateDocReq")
	proto.RegisterType((*UpdateDocResp)(nil), "model.UpdateDocResp")
	proto.RegisterType((*DeleteDocReq)(nil), "model.DeleteDocReq")
	proto.RegisterType((*DeleteDocResp)(nil), "model.DeleteDocResp")
}

func init() {
	proto.RegisterFile("github.com/pinezapple/LibraryProject20201/skeleton/model/docmanager.proto", fileDescriptor_3bc93e03df457931)
}

var fileDescriptor_3bc93e03df457931 = []byte{
	// 738 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x8d, 0xe3, 0x24, 0x6d, 0x6e, 0x9a, 0xaf, 0x5f, 0xa7, 0x15, 0x98, 0x08, 0xec, 0x30, 0x12,
	0x52, 0xf8, 0x4b, 0xda, 0xb0, 0xe1, 0x47, 0x48, 0x24, 0xb2, 0x10, 0x91, 0x28, 0x42, 0x53, 0xd8,
	0xb0, 0x89, 0x9c, 0xf1, 0x34, 0x35, 0x24, 0x19, 0xd7, 0x76, 0x90, 0xd2, 0xa7, 0xe0, 0x31, 0x78,
	0x04, 0x36, 0x48, 0x2c, 0xbb, 0xec, 0x92, 0x95, 0xd5, 0xa6, 0xbb, 0xac, 0x50, 0x56, 0xac, 0x10,
	0xf2, 0xc4, 0x8e, 0x9d, 0x52, 0x09, 0x2a, 0xd8, 0xf9, 0x9c, 0x7b, 0xce, 0xbd, 0xe3, 0x33, 0x57,
	0x36, 0xb4, 0xba, 0x96, 0xb7, 0x37, 0xec, 0x54, 0x29, 0xef, 0xd7, 0x6c, 0x6b, 0xc0, 0x0e, 0x0c,
	0xdb, 0xee, 0xb1, 0xda, 0x73, 0xab, 0xe3, 0x18, 0xce, 0xe8, 0xa5, 0xc3, 0xdf, 0x32, 0xea, 0xd5,
	0x37, 0xeb, 0x9b, 0x5b, 0x35, 0xf7, 0x1d, 0xeb, 0x31, 0x8f, 0x0f, 0x6a, 0x7d, 0x6e, 0xb2, 0x5e,
	0xcd, 0xe4, 0xb4, 0x6f, 0x0c, 0x8c, 0x2e, 0x73, 0xaa, 0xb6, 0xc3, 0x3d, 0x8e, 0xb2, 0x82, 0x2f,
	0xdd, 0x4d, 0x74, 0xec, 0xf2, 0x2e, 0xaf, 0x89, 0x6a, 0x67, 0xb8, 0x2b, 0x90, 0x00, 0xe2, 0x69,
	0xe6, 0xc2, 0x3f, 0x64, 0x90, 0x75, 0x4e, 0xd1, 0x4d, 0x48, 0xb7, 0x74, 0x45, 0x2a, 0x4b, 0x95,
	0x4c, 0xf3, 0xca, 0xc4, 0xd7, 0x72, 0x96, 0xd9, 0x36, 0x39, 0x9d, 0xfa, 0x5a, 0xc1, 0xec, 0x3c,
	0xc4, 0x33, 0x84, 0x49, 0xba, 0xa5, 0xa3, 0x2d, 0xc8, 0xbc, 0x30, 0xfa, 0x4c, 0x49, 0x97, 0xa5,
	0x4a, 0xbe, 0x79, 0x6d, 0xe2, 0x6b, 0xcb, 0x26, 0xa7, 0xed, 0x81, 0xd1, 0x67, 0x53, 0x5f, 0x2b,
	0x06, 0xf2, 0x08, 0x63, 0x22, 0xa4, 0xe8, 0x01, 0xe4, 0x1a, 0x43, 0x6f, 0x8f, 0x3b, 0x8a, 0x2c,
	0x4c, 0xd7, 0x27, 0xbe, 0x06, 0x81, 0xc8, 0x10, 0xec, 0xd4, 0xd7, 0x56, 0x23, 0xdb, 0x8c, 0xc1,
	0x24, 0x34, 0x04, 0xd3, 0x5e, 0x8d, 0x6c, 0xa6, 0x64, 0x16, 0xa7, 0x79, 0x23, 0x7b, 0x61, 0x5a,
	0x80, 0x31, 0x11, 0x52, 0xb4, 0x0d, 0x05, 0x9d, 0xb9, 0xd4, 0xb1, 0x6c, 0xcf, 0xe2, 0x03, 0x25,
	0x2b, 0x9c, 0xb7, 0x27, 0xc1, 0x10, 0x4e, 0xdb, 0x66, 0x5c, 0x9a, 0xfa, 0xda, 0x46, 0xd4, 0x20,
	0x41, 0x63, 0x92, 0xf4, 0xa3, 0x2d, 0xc8, 0xed, 0x78, 0x86, 0x37, 0x74, 0x95, 0x5c, 0x59, 0xaa,
	0x14, 0x67, 0xf1, 0xb8, 0x82, 0x89, 0xe2, 0x99, 0x21, 0x4c, 0x42, 0x21, 0xba, 0x01, 0xf2, 0x53,
	0xc6, 0x94, 0x25, 0xa1, 0x5f, 0x9f, 0xf8, 0x9a, 0xbc, 0xcb, 0x82, 0xe3, 0x2e, 0x07, 0xe2, 0x5d,
	0xc6, 0x30, 0x09, 0xea, 0xe8, 0x09, 0x00, 0x75, 0x98, 0xe1, 0x31, 0xb3, 0x6d, 0x78, 0xca, 0x72,
	0x1c, 0x4d, 0xcc, 0x46, 0xd1, 0xc4, 0x0c, 0x26, 0xf9, 0x10, 0x34, 0xbc, 0xa0, 0xc3, 0xd0, 0x36,
	0xa3, 0x0e, 0xf9, 0xb8, 0x43, 0xcc, 0x46, 0x1d, 0x62, 0x06, 0x93, 0x7c, 0x08, 0x1a, 0x1e, 0x5e,
	0x83, 0xd5, 0x1d, 0xd6, 0x63, 0xd4, 0x6b, 0xf4, 0x7a, 0x3a, 0xa7, 0x84, 0xed, 0x63, 0x1b, 0xfe,
	0x5f, 0xa4, 0x5c, 0x1b, 0x21, 0xc8, 0x50, 0x6e, 0x32, 0xb1, 0x21, 0x59, 0x22, 0x9e, 0x91, 0x02,
	0x4b, 0x7d, 0xe6, 0xba, 0x46, 0x37, 0xdc, 0x05, 0x12, 0x41, 0x54, 0x85, 0xbc, 0xc9, 0xe9, 0xb0,
	0xcf, 0x06, 0x9e, 0xab, 0xc8, 0x65, 0xb9, 0x52, 0xa8, 0x43, 0x55, 0xec, 0x67, 0x55, 0xe7, 0xb4,
	0x99, 0x39, 0xf4, 0x35, 0x89, 0xc4, 0x12, 0x5c, 0x89, 0x26, 0x06, 0xd5, 0x51, 0x4b, 0x27, 0x6c,
	0x1f, 0x6d, 0x40, 0x56, 0xe7, 0x34, 0x5a, 0x4a, 0x32, 0x03, 0x78, 0x1f, 0xd6, 0xce, 0x28, 0xff,
	0xf6, 0x70, 0xd2, 0xef, 0x0e, 0x77, 0x0b, 0x60, 0xc7, 0x78, 0xcf, 0x66, 0xe1, 0xa0, 0xab, 0x20,
	0x9b, 0x9c, 0x8a, 0x51, 0x0b, 0x3e, 0x12, 0xd0, 0xf8, 0x11, 0x14, 0xe6, 0xda, 0x8b, 0x1e, 0x0c,
	0xdf, 0x81, 0x95, 0xd7, 0xe2, 0x5e, 0xfe, 0x68, 0xd4, 0x63, 0x28, 0x26, 0xd4, 0x17, 0x1e, 0xa6,
	0xc2, 0x8a, 0x1e, 0x7c, 0x50, 0xa2, 0x61, 0xff, 0x41, 0xda, 0x32, 0xc3, 0xac, 0xd3, 0x96, 0x19,
	0xb4, 0x4f, 0xd4, 0x2f, 0xda, 0xbe, 0xfe, 0x39, 0x0d, 0xa0, 0xcf, 0x3f, 0x51, 0xa8, 0x01, 0x2b,
	0xc9, 0x95, 0x42, 0x97, 0xc2, 0xb7, 0x39, 0xb3, 0x7a, 0xa5, 0xcb, 0xe7, 0xf2, 0xae, 0x8d, 0x53,
	0x48, 0x87, 0xe2, 0xc2, 0xcd, 0xa3, 0x45, 0x6d, 0xbc, 0x39, 0x25, 0xe5, 0xfc, 0x82, 0xe8, 0x52,
	0x87, 0xa5, 0xf0, 0x82, 0xd0, 0x5a, 0x24, 0x9b, 0x5f, 0x6e, 0x09, 0x9d, 0xa5, 0x84, 0xe7, 0x3e,
	0xe4, 0xe7, 0x49, 0xa3, 0xf5, 0x50, 0x92, 0xbc, 0xa9, 0xd2, 0xc6, 0xaf, 0x64, 0xe4, 0x9c, 0x87,
	0x38, 0x77, 0x26, 0x63, 0x9f, 0x3b, 0x17, 0xb2, 0xc6, 0xa9, 0xe6, 0xc1, 0xf1, 0x89, 0x2a, 0x7d,
	0x3b, 0x51, 0xa5, 0xef, 0x27, 0xaa, 0xf4, 0x71, 0xac, 0x4a, 0x9f, 0xc6, 0xaa, 0xf4, 0x65, 0xac,
	0xa6, 0x0e, 0xc7, 0xaa, 0x74, 0x34, 0x56, 0xa5, 0xe3, 0xb1, 0x2a, 0x7d, 0x38, 0x55, 0x53, 0x47,
	0xa7, 0x6a, 0xea, 0xeb, 0xa9, 0x9a, 0x7a, 0xf3, 0xec, 0x1f, 0xfc, 0x4a, 0xb6, 0x03, 0xdc, 0xc9,
	0x89, 0x5f, 0xc3, 0xbd, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbc, 0x87, 0x9a, 0x77, 0x9d, 0x06,
	0x00, 0x00,
}

func (this *Doc) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Doc)
	if !ok {
		that2, ok := that.(Doc)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Doc")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Doc but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Doc but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.Author != that1.Author {
		return fmt.Errorf("Author this(%v) Not Equal that(%v)", this.Author, that1.Author)
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if this.Description != that1.Description {
		return fmt.Errorf("Description this(%v) Not Equal that(%v)", this.Description, that1.Description)
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if this.Fee != that1.Fee {
		return fmt.Errorf("Fee this(%v) Not Equal that(%v)", this.Fee, that1.Fee)
	}
	if this.CreatedAt != that1.CreatedAt {
		return fmt.Errorf("CreatedAt this(%v) Not Equal that(%v)", this.CreatedAt, that1.CreatedAt)
	}
	if this.UpdatedAt != that1.UpdatedAt {
		return fmt.Errorf("UpdatedAt this(%v) Not Equal that(%v)", this.UpdatedAt, that1.UpdatedAt)
	}
	return nil
}
func (this *Doc) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Doc)
	if !ok {
		that2, ok := that.(Doc)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Author != that1.Author {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Fee != that1.Fee {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	if this.UpdatedAt != that1.UpdatedAt {
		return false
	}
	return true
}
func (this *SelectAllDocReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectAllDocReq)
	if !ok {
		that2, ok := that.(SelectAllDocReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectAllDocReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectAllDocReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectAllDocReq but is not nil && this == nil")
	}
	return nil
}
func (this *SelectAllDocReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectAllDocReq)
	if !ok {
		that2, ok := that.(SelectAllDocReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SelectAllDocResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectAllDocResp)
	if !ok {
		that2, ok := that.(SelectAllDocResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectAllDocResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectAllDocResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectAllDocResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	if len(this.Documents) != len(that1.Documents) {
		return fmt.Errorf("Documents this(%v) Not Equal that(%v)", len(this.Documents), len(that1.Documents))
	}
	for i := range this.Documents {
		if !this.Documents[i].Equal(that1.Documents[i]) {
			return fmt.Errorf("Documents this[%v](%v) Not Equal that[%v](%v)", i, this.Documents[i], i, that1.Documents[i])
		}
	}
	return nil
}
func (this *SelectAllDocResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectAllDocResp)
	if !ok {
		that2, ok := that.(SelectAllDocResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if len(this.Documents) != len(that1.Documents) {
		return false
	}
	for i := range this.Documents {
		if !this.Documents[i].Equal(that1.Documents[i]) {
			return false
		}
	}
	return true
}
func (this *SelectDocByIDReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectDocByIDReq)
	if !ok {
		that2, ok := that.(SelectDocByIDReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectDocByIDReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectDocByIDReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectDocByIDReq but is not nil && this == nil")
	}
	if this.DocID != that1.DocID {
		return fmt.Errorf("DocID this(%v) Not Equal that(%v)", this.DocID, that1.DocID)
	}
	return nil
}
func (this *SelectDocByIDReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectDocByIDReq)
	if !ok {
		that2, ok := that.(SelectDocByIDReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DocID != that1.DocID {
		return false
	}
	return true
}
func (this *SelectDocByIDResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SelectDocByIDResp)
	if !ok {
		that2, ok := that.(SelectDocByIDResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SelectDocByIDResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SelectDocByIDResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SelectDocByIDResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	if !this.Documents.Equal(that1.Documents) {
		return fmt.Errorf("Documents this(%v) Not Equal that(%v)", this.Documents, that1.Documents)
	}
	return nil
}
func (this *SelectDocByIDResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SelectDocByIDResp)
	if !ok {
		that2, ok := that.(SelectDocByIDResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if !this.Documents.Equal(that1.Documents) {
		return false
	}
	return true
}
func (this *SaveDocReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SaveDocReq)
	if !ok {
		that2, ok := that.(SaveDocReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SaveDocReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SaveDocReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SaveDocReq but is not nil && this == nil")
	}
	if !this.Doc.Equal(that1.Doc) {
		return fmt.Errorf("Doc this(%v) Not Equal that(%v)", this.Doc, that1.Doc)
	}
	return nil
}
func (this *SaveDocReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SaveDocReq)
	if !ok {
		that2, ok := that.(SaveDocReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Doc.Equal(that1.Doc) {
		return false
	}
	return true
}
func (this *SaveDocResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SaveDocResp)
	if !ok {
		that2, ok := that.(SaveDocResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *SaveDocResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *SaveDocResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *SaveDocResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	return nil
}
func (this *SaveDocResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SaveDocResp)
	if !ok {
		that2, ok := that.(SaveDocResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *UpdateDocReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateDocReq)
	if !ok {
		that2, ok := that.(UpdateDocReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateDocReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateDocReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateDocReq but is not nil && this == nil")
	}
	if !this.Doc.Equal(that1.Doc) {
		return fmt.Errorf("Doc this(%v) Not Equal that(%v)", this.Doc, that1.Doc)
	}
	return nil
}
func (this *UpdateDocReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateDocReq)
	if !ok {
		that2, ok := that.(UpdateDocReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Doc.Equal(that1.Doc) {
		return false
	}
	return true
}
func (this *UpdateDocResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateDocResp)
	if !ok {
		that2, ok := that.(UpdateDocResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateDocResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateDocResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateDocResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	return nil
}
func (this *UpdateDocResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateDocResp)
	if !ok {
		that2, ok := that.(UpdateDocResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *DeleteDocReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DeleteDocReq)
	if !ok {
		that2, ok := that.(DeleteDocReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DeleteDocReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DeleteDocReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DeleteDocReq but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	return nil
}
func (this *DeleteDocReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteDocReq)
	if !ok {
		that2, ok := that.(DeleteDocReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *DeleteDocResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DeleteDocResp)
	if !ok {
		that2, ok := that.(DeleteDocResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DeleteDocResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DeleteDocResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DeleteDocResp but is not nil && this == nil")
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if this.Message != that1.Message {
		return fmt.Errorf("Message this(%v) Not Equal that(%v)", this.Message, that1.Message)
	}
	return nil
}
func (this *DeleteDocResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteDocResp)
	if !ok {
		that2, ok := that.(DeleteDocResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *Doc) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&docmanagerModel.Doc{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Author: "+fmt.Sprintf("%#v", this.Author)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Fee: "+fmt.Sprintf("%#v", this.Fee)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectAllDocReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&docmanagerModel.SelectAllDocReq{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectAllDocResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&docmanagerModel.SelectAllDocResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.Documents != nil {
		s = append(s, "Documents: "+fmt.Sprintf("%#v", this.Documents)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectDocByIDReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&docmanagerModel.SelectDocByIDReq{")
	s = append(s, "DocID: "+fmt.Sprintf("%#v", this.DocID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SelectDocByIDResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&docmanagerModel.SelectDocByIDResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	if this.Documents != nil {
		s = append(s, "Documents: "+fmt.Sprintf("%#v", this.Documents)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SaveDocReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&docmanagerModel.SaveDocReq{")
	if this.Doc != nil {
		s = append(s, "Doc: "+fmt.Sprintf("%#v", this.Doc)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SaveDocResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&docmanagerModel.SaveDocResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateDocReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&docmanagerModel.UpdateDocReq{")
	if this.Doc != nil {
		s = append(s, "Doc: "+fmt.Sprintf("%#v", this.Doc)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateDocResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&docmanagerModel.UpdateDocResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteDocReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&docmanagerModel.DeleteDocReq{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteDocResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&docmanagerModel.DeleteDocResp{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDocmanager(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DocmanagerClient is the client API for Docmanager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DocmanagerClient interface {
	SelectAllDoc(ctx context.Context, in *SelectAllDocReq, opts ...grpc.CallOption) (*SelectAllDocResp, error)
	SelectDocByID(ctx context.Context, in *SelectDocByIDReq, opts ...grpc.CallOption) (*SelectDocByIDResp, error)
	SaveDoc(ctx context.Context, in *SaveDocReq, opts ...grpc.CallOption) (*SaveDocResp, error)
	UpdateDoc(ctx context.Context, in *UpdateDocReq, opts ...grpc.CallOption) (*UpdateDocResp, error)
	DeleteDoc(ctx context.Context, in *DeleteDocReq, opts ...grpc.CallOption) (*DeleteDocResp, error)
}

type docmanagerClient struct {
	cc *grpc.ClientConn
}

func NewDocmanagerClient(cc *grpc.ClientConn) DocmanagerClient {
	return &docmanagerClient{cc}
}

func (c *docmanagerClient) SelectAllDoc(ctx context.Context, in *SelectAllDocReq, opts ...grpc.CallOption) (*SelectAllDocResp, error) {
	out := new(SelectAllDocResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/SelectAllDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) SelectDocByID(ctx context.Context, in *SelectDocByIDReq, opts ...grpc.CallOption) (*SelectDocByIDResp, error) {
	out := new(SelectDocByIDResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/SelectDocByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) SaveDoc(ctx context.Context, in *SaveDocReq, opts ...grpc.CallOption) (*SaveDocResp, error) {
	out := new(SaveDocResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/SaveDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) UpdateDoc(ctx context.Context, in *UpdateDocReq, opts ...grpc.CallOption) (*UpdateDocResp, error) {
	out := new(UpdateDocResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/UpdateDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docmanagerClient) DeleteDoc(ctx context.Context, in *DeleteDocReq, opts ...grpc.CallOption) (*DeleteDocResp, error) {
	out := new(DeleteDocResp)
	err := c.cc.Invoke(ctx, "/model.Docmanager/DeleteDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocmanagerServer is the server API for Docmanager service.
type DocmanagerServer interface {
	SelectAllDoc(context.Context, *SelectAllDocReq) (*SelectAllDocResp, error)
	SelectDocByID(context.Context, *SelectDocByIDReq) (*SelectDocByIDResp, error)
	SaveDoc(context.Context, *SaveDocReq) (*SaveDocResp, error)
	UpdateDoc(context.Context, *UpdateDocReq) (*UpdateDocResp, error)
	DeleteDoc(context.Context, *DeleteDocReq) (*DeleteDocResp, error)
}

// UnimplementedDocmanagerServer can be embedded to have forward compatible implementations.
type UnimplementedDocmanagerServer struct {
}

func (*UnimplementedDocmanagerServer) SelectAllDoc(ctx context.Context, req *SelectAllDocReq) (*SelectAllDocResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectAllDoc not implemented")
}
func (*UnimplementedDocmanagerServer) SelectDocByID(ctx context.Context, req *SelectDocByIDReq) (*SelectDocByIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectDocByID not implemented")
}
func (*UnimplementedDocmanagerServer) SaveDoc(ctx context.Context, req *SaveDocReq) (*SaveDocResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveDoc not implemented")
}
func (*UnimplementedDocmanagerServer) UpdateDoc(ctx context.Context, req *UpdateDocReq) (*UpdateDocResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDoc not implemented")
}
func (*UnimplementedDocmanagerServer) DeleteDoc(ctx context.Context, req *DeleteDocReq) (*DeleteDocResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDoc not implemented")
}

func RegisterDocmanagerServer(s *grpc.Server, srv DocmanagerServer) {
	s.RegisterService(&_Docmanager_serviceDesc, srv)
}

func _Docmanager_SelectAllDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectAllDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).SelectAllDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/SelectAllDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).SelectAllDoc(ctx, req.(*SelectAllDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_SelectDocByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectDocByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).SelectDocByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/SelectDocByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).SelectDocByID(ctx, req.(*SelectDocByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_SaveDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).SaveDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/SaveDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).SaveDoc(ctx, req.(*SaveDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_UpdateDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).UpdateDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/UpdateDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).UpdateDoc(ctx, req.(*UpdateDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docmanager_DeleteDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocmanagerServer).DeleteDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Docmanager/DeleteDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocmanagerServer).DeleteDoc(ctx, req.(*DeleteDocReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Docmanager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "model.Docmanager",
	HandlerType: (*DocmanagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SelectAllDoc",
			Handler:    _Docmanager_SelectAllDoc_Handler,
		},
		{
			MethodName: "SelectDocByID",
			Handler:    _Docmanager_SelectDocByID_Handler,
		},
		{
			MethodName: "SaveDoc",
			Handler:    _Docmanager_SaveDoc_Handler,
		},
		{
			MethodName: "UpdateDoc",
			Handler:    _Docmanager_UpdateDoc_Handler,
		},
		{
			MethodName: "DeleteDoc",
			Handler:    _Docmanager_DeleteDoc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/pinezapple/LibraryProject20201/skeleton/model/docmanager.proto",
}

func (m *Doc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Doc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Doc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x42
	}
	if m.Fee != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Fee))
		i--
		dAtA[i] = 0x38
	}
	if m.Status != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Author) > 0 {
		i -= len(m.Author)
		copy(dAtA[i:], m.Author)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Author)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectAllDocReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectAllDocReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectAllDocReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SelectAllDocResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectAllDocResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectAllDocResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Documents) > 0 {
		for iNdEx := len(m.Documents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Documents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDocmanager(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectDocByIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectDocByIDReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectDocByIDReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DocID != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.DocID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SelectDocByIDResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectDocByIDResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SelectDocByIDResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Documents != nil {
		{
			size, err := m.Documents.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SaveDocReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveDocReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveDocReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Doc != nil {
		{
			size, err := m.Doc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SaveDocResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveDocResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveDocResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateDocReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDocReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDocReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Doc != nil {
		{
			size, err := m.Doc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDocmanager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateDocResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDocResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDocResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteDocReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteDocReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteDocReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteDocResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteDocResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteDocResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDocmanager(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDocmanager(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDocmanager(dAtA []byte, offset int, v uint64) int {
	offset -= sovDocmanager(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedDoc(r randyDocmanager, easy bool) *Doc {
	this := &Doc{}
	this.ID = uint64(uint64(r.Uint32()))
	this.Name = string(randStringDocmanager(r))
	this.Author = string(randStringDocmanager(r))
	this.Type = string(randStringDocmanager(r))
	this.Description = string(randStringDocmanager(r))
	this.Status = uint32(r.Uint32())
	this.Fee = uint32(r.Uint32())
	this.CreatedAt = string(randStringDocmanager(r))
	this.UpdatedAt = string(randStringDocmanager(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectAllDocReq(r randyDocmanager, easy bool) *SelectAllDocReq {
	this := &SelectAllDocReq{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectAllDocResp(r randyDocmanager, easy bool) *SelectAllDocResp {
	this := &SelectAllDocResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanager(r))
	if r.Intn(5) != 0 {
		v1 := r.Intn(5)
		this.Documents = make([]*Doc, v1)
		for i := 0; i < v1; i++ {
			this.Documents[i] = NewPopulatedDoc(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectDocByIDReq(r randyDocmanager, easy bool) *SelectDocByIDReq {
	this := &SelectDocByIDReq{}
	this.DocID = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSelectDocByIDResp(r randyDocmanager, easy bool) *SelectDocByIDResp {
	this := &SelectDocByIDResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanager(r))
	if r.Intn(5) != 0 {
		this.Documents = NewPopulatedDoc(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSaveDocReq(r randyDocmanager, easy bool) *SaveDocReq {
	this := &SaveDocReq{}
	if r.Intn(5) != 0 {
		this.Doc = NewPopulatedDoc(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSaveDocResp(r randyDocmanager, easy bool) *SaveDocResp {
	this := &SaveDocResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanager(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateDocReq(r randyDocmanager, easy bool) *UpdateDocReq {
	this := &UpdateDocReq{}
	if r.Intn(5) != 0 {
		this.Doc = NewPopulatedDoc(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateDocResp(r randyDocmanager, easy bool) *UpdateDocResp {
	this := &UpdateDocResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanager(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeleteDocReq(r randyDocmanager, easy bool) *DeleteDocReq {
	this := &DeleteDocReq{}
	this.Id = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeleteDocResp(r randyDocmanager, easy bool) *DeleteDocResp {
	this := &DeleteDocResp{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	this.Message = string(randStringDocmanager(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyDocmanager interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneDocmanager(r randyDocmanager) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringDocmanager(r randyDocmanager) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneDocmanager(r)
	}
	return string(tmps)
}
func randUnrecognizedDocmanager(r randyDocmanager, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldDocmanager(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldDocmanager(dAtA []byte, r randyDocmanager, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateDocmanager(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateDocmanager(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateDocmanager(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateDocmanager(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateDocmanager(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateDocmanager(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateDocmanager(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Doc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovDocmanager(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovDocmanager(uint64(m.Status))
	}
	if m.Fee != 0 {
		n += 1 + sovDocmanager(uint64(m.Fee))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func (m *SelectAllDocReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SelectAllDocResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanager(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	if len(m.Documents) > 0 {
		for _, e := range m.Documents {
			l = e.Size()
			n += 1 + l + sovDocmanager(uint64(l))
		}
	}
	return n
}

func (m *SelectDocByIDReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DocID != 0 {
		n += 1 + sovDocmanager(uint64(m.DocID))
	}
	return n
}

func (m *SelectDocByIDResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanager(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	if m.Documents != nil {
		l = m.Documents.Size()
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func (m *SaveDocReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Doc != nil {
		l = m.Doc.Size()
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func (m *SaveDocResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanager(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func (m *UpdateDocReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Doc != nil {
		l = m.Doc.Size()
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func (m *UpdateDocResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanager(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func (m *DeleteDocReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDocmanager(uint64(m.Id))
	}
	return n
}

func (m *DeleteDocResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDocmanager(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDocmanager(uint64(l))
	}
	return n
}

func sovDocmanager(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDocmanager(x uint64) (n int) {
	return sovDocmanager(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Doc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Doc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Doc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			m.Fee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectAllDocReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectAllDocReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectAllDocReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectAllDocResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectAllDocResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectAllDocResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Documents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Documents = append(m.Documents, &Doc{})
			if err := m.Documents[len(m.Documents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectDocByIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectDocByIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectDocByIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocID", wireType)
			}
			m.DocID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DocID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectDocByIDResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectDocByIDResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectDocByIDResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Documents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Documents == nil {
				m.Documents = &Doc{}
			}
			if err := m.Documents.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveDocReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveDocReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveDocReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Doc == nil {
				m.Doc = &Doc{}
			}
			if err := m.Doc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveDocResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveDocResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveDocResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDocReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDocReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDocReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Doc == nil {
				m.Doc = &Doc{}
			}
			if err := m.Doc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDocResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDocResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDocResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteDocReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteDocReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteDocReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteDocResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteDocResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteDocResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDocmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDocmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDocmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDocmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDocmanager(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDocmanager
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDocmanager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDocmanager
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDocmanager
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDocmanager
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDocmanager        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDocmanager          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDocmanager = fmt.Errorf("proto: unexpected end of group")
)
